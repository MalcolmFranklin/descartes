Useless nonterminals:

   module_title


Terminals which are not used:

   P_PLUS
   P_MINUS
   P_TIMES
   P_DIVIDED_BY
   P_RAISED_TO
   P_EQUAL
   P_NOT_EQUAL
   P_GREATER_THAN
   P_LESS_THAN
   P_GREATER_THAN_OR_EQUAL
   P_LESS_THAN_OR_EQUAL
   P_OR
   P_AND
   P_NOT
   P_CONCUR
   P_EQUAL_TO
   P_TIMER
   P_SEND_TO
   P_RECEIVE_FROM
   P_DELAY
   P_ASEND_TO
   P_ARECEIVE_FROM
   P_GTIME


Useless rules:

#78    module_title :	 module_call nls;


State 24 contains 1 shift/reduce conflict.
State 50 contains 1 shift/reduce conflict.
State 55 contains 1 shift/reduce conflict.
State 56 contains 1 shift/reduce conflict.
State 69 contains 1 reduce/reduce conflict.
State 87 contains 1 shift/reduce conflict.
State 88 contains 1 shift/reduce conflict.
State 92 contains 1 shift/reduce conflict.
State 94 contains 1 shift/reduce conflict.
State 108 contains 1 shift/reduce conflict.
State 132 contains 6 reduce/reduce conflicts.

Grammar
rule 1    modules -> module
rule 2    modules -> modules module
rule 3    module -> module_name nls hoare_trees
rule 4    module -> error nls hoare_trees
rule 5    hoare_trees -> hoare_tree
rule 6    hoare_trees -> hoare_trees hoare_tree
rule 7    hoare_tree -> input_def_sec
rule 8    hoare_tree -> output_def_sec
rule 9    nls -> '\n'
rule 10   t_node_name -> cap_char
rule 11   t_node_name -> LITERALS
rule 12   t_node_name -> module_call
rule 13   module_name -> name_sequence
rule 14   module_name -> name_seq
rule 15   module_name -> REFER
rule 16   name_sequence -> cap_char L_PAR cap_char R_PAR
rule 17   name_sequence -> cap_char L_PAR cap_char error
rule 18   name_sequence -> name_sequence cap_char L_PAR cap_char R_PAR
rule 19   name_sequence -> name_sequence cap_char L_PAR cap_char error
rule 20   name_sequence -> name_sequence cap_char L_PAR cap_char R_PAR cap_char
rule 21   name_seq -> L_PAR cap_char R_PAR cap_char
rule 22   name_seq -> L_PAR cap_char error cap_char
rule 23   name_seq -> name_seq L_PAR cap_char R_PAR cap_char
rule 24   name_seq -> name_seq L_PAR cap_char error cap_char
rule 25   name_seq -> name_seq L_PAR cap_char R_PAR
rule 26   name_seq -> name_seq L_PAR cap_char error
rule 27   para -> INDENT REFER nls
rule 28   para -> INDENT error nls
rule 29   para -> INDENT REFER error
rule 30   input_def_sec -> analysis_tree
rule 31   input_def_sec -> input_def_sec analysis_tree
rule 32   analysis_tree -> para node_set
rule 33   output_def_sec -> return syn_tree_set
rule 34   syn_tree_set -> node_set
rule 35   syn_tree_set -> syn_tree_set node_set
rule 36   return -> RETURN nls
rule 37   return -> RETURN operators nls
rule 38   return -> RETURN error nls
rule 39   return -> INDENT MATCH nls
rule 40   return -> INDENT error nls
rule 41   node_set -> Indent node_name nls
rule 42   node_set -> Indent error nls
rule 43   node_set -> Indent node_name operators nls
rule 44   node_set -> Indent error operators nls
rule 45   node_set -> node_set Indent node_name nls
rule 46   node_set -> node_set Indent error nls
rule 47   node_set -> node_set Indent node_name operators nls
rule 48   node_set -> node_set Indent error operators nls
rule 49   operators -> operator
rule 50   operators -> operator sequence_no
rule 51   operators -> sequence_no
rule 52   operator -> disc_union
rule 53   operator -> sequen
rule 54   operator -> sequen disc_union
rule 55   operator -> disc_union sequen
rule 56   operator -> RANGE
rule 57   sequence_no -> '#'
rule 58   sequen -> '*'
rule 59   disc_union -> '+'
rule 60   primitives -> non_argu_prim
rule 61   module_call -> primitives
rule 62   module_call -> module_node
rule 63   node_name -> MATCH
rule 64   node_name -> LITERALS
rule 65   node_name -> module_call
rule 66   node_name -> REFER
rule 67   non_argu_prim -> NEW_LINE
rule 68   non_argu_prim -> NEW_PAGE
rule 69   non_argu_prim -> P_PARALLEL
rule 70   module_node -> m_name_sequence
rule 71   module_node -> m_name_seq
rule 72   m_name_sequence -> cap_char L_PAR t_node_name R_PAR
rule 73   m_name_sequence -> m_name_sequence cap_char L_PAR t_node_name R_PAR
rule 74   m_name_sequence -> m_name_sequence t_node_name L_PAR t_node_name R_PAR cap_char
rule 75   m_name_seq -> L_PAR t_node_name R_PAR cap_char
rule 76   m_name_seq -> m_name_seq L_PAR t_node_name R_PAR cap_char
rule 77   m_name_seq -> m_name_seq L_PAR t_node_name R_PAR
rule 79   Indent -> indent
rule 80   indent -> INDENT
rule 81   indent -> indent INDENT
rule 82   cap_char -> CAP_C

Terminals, with rules where they appear

$ (-1)
'\n' (10) 9
'#' (35) 57
'*' (42) 58
'+' (43) 59
error (256) 4 17 19 22 24 26 28 29 38 40 42 44 46 48
NEW_LINE (258) 67
NEW_PAGE (259) 68
RETURN (260) 36 37 38
R_PAR (261) 16 18 20 21 23 25 72 73 74 75 76 77
L_PAR (262) 16 17 18 19 20 21 22 23 24 25 26 72 73 74 75 76 77
INDENT (263) 27 28 29 39 40 80 81
RANGE (264) 56
LITERALS (265) 11 64
REFER (266) 15 27 29 66
MATCH (267) 39 63
CAP_C (268) 82
P_PLUS (269)
P_MINUS (270)
P_TIMES (271)
P_DIVIDED_BY (272)
P_RAISED_TO (273)
P_EQUAL (274)
P_NOT_EQUAL (275)
P_GREATER_THAN (276)
P_LESS_THAN (277)
P_GREATER_THAN_OR_EQUAL (278)
P_LESS_THAN_OR_EQUAL (279)
P_OR (280)
P_AND (281)
P_NOT (282)
P_PARALLEL (283) 69
P_CONCUR (284)
P_EQUAL_TO (285)
P_TIMER (286)
P_SEND_TO (287)
P_RECEIVE_FROM (288)
P_DELAY (289)
P_ASEND_TO (290)
P_ARECEIVE_FROM (291)
P_GTIME (292)

Nonterminals, with rules where they appear

modules (42)
    on left: 1 2, on right: 2
module (43)
    on left: 3 4, on right: 1 2
hoare_trees (44)
    on left: 5 6, on right: 3 4 6
hoare_tree (45)
    on left: 7 8, on right: 5 6
nls (46)
    on left: 9, on right: 3 4 27 28 36 37 38 39 40 41 42 43 44 45 46
    47 48 78
t_node_name (47)
    on left: 10 11 12, on right: 72 73 74 75 76 77
module_name (48)
    on left: 13 14 15, on right: 3
name_sequence (49)
    on left: 16 17 18 19 20, on right: 13 18 19 20
name_seq (50)
    on left: 21 22 23 24 25 26, on right: 14 23 24 25 26
para (51)
    on left: 27 28 29, on right: 32
input_def_sec (52)
    on left: 30 31, on right: 7 31
analysis_tree (53)
    on left: 32, on right: 30 31
output_def_sec (54)
    on left: 33, on right: 8
syn_tree_set (55)
    on left: 34 35, on right: 33 35
return (56)
    on left: 36 37 38 39 40, on right: 33
node_set (57)
    on left: 41 42 43 44 45 46 47 48, on right: 32 34 35 45 46 47 48
operators (58)
    on left: 49 50 51, on right: 37 43 44 47 48
operator (59)
    on left: 52 53 54 55 56, on right: 49 50
sequence_no (60)
    on left: 57, on right: 50 51
sequen (61)
    on left: 58, on right: 53 54 55
disc_union (62)
    on left: 59, on right: 52 54 55
primitives (63)
    on left: 60, on right: 61
module_call (64)
    on left: 61 62, on right: 12 65 78
node_name (65)
    on left: 63 64 65 66, on right: 41 43 45 47
non_argu_prim (66)
    on left: 67 68 69, on right: 60
module_node (67)
    on left: 70 71, on right: 62
m_name_sequence (68)
    on left: 72 73 74, on right: 70 73 74
m_name_seq (69)
    on left: 75 76 77, on right: 71 76 77
Indent (70)
    on left: 79, on right: 41 42 43 44 45 46 47 48
indent (71)
    on left: 80 81, on right: 79 81
cap_char (72)
    on left: 82, on right: 10 16 17 18 19 20 21 22 23 24 25 26 72 73
    74 75 76


state 0

    error	shift, and go to state 1
    L_PAR	shift, and go to state 2
    REFER	shift, and go to state 3
    CAP_C	shift, and go to state 4

    modules	go to state 5
    module	go to state 6
    module_name	go to state 7
    name_sequence	go to state 8
    name_seq	go to state 9
    cap_char	go to state 10



state 1

    module  ->  error . nls hoare_trees   (rule 4)

    '\n'	shift, and go to state 11

    nls 	go to state 12



state 2

    name_seq  ->  L_PAR . cap_char R_PAR cap_char   (rule 21)
    name_seq  ->  L_PAR . cap_char error cap_char   (rule 22)

    CAP_C	shift, and go to state 4

    cap_char	go to state 13



state 3

    module_name  ->  REFER .   (rule 15)

    $default	reduce using rule 15 (module_name)



state 4

    cap_char  ->  CAP_C .   (rule 82)

    $default	reduce using rule 82 (cap_char)



state 5

    modules  ->  modules . module   (rule 2)

    $   	go to state 135
    error	shift, and go to state 1
    L_PAR	shift, and go to state 2
    REFER	shift, and go to state 3
    CAP_C	shift, and go to state 4

    module	go to state 14
    module_name	go to state 7
    name_sequence	go to state 8
    name_seq	go to state 9
    cap_char	go to state 10



state 6

    modules  ->  module .   (rule 1)

    $default	reduce using rule 1 (modules)



state 7

    module  ->  module_name . nls hoare_trees   (rule 3)

    '\n'	shift, and go to state 11

    nls 	go to state 15



state 8

    module_name  ->  name_sequence .   (rule 13)
    name_sequence  ->  name_sequence . cap_char L_PAR cap_char R_PAR   (rule 18)
    name_sequence  ->  name_sequence . cap_char L_PAR cap_char error   (rule 19)
    name_sequence  ->  name_sequence . cap_char L_PAR cap_char R_PAR cap_char   (rule 20)

    CAP_C	shift, and go to state 4

    $default	reduce using rule 13 (module_name)

    cap_char	go to state 16



state 9

    module_name  ->  name_seq .   (rule 14)
    name_seq  ->  name_seq . L_PAR cap_char R_PAR cap_char   (rule 23)
    name_seq  ->  name_seq . L_PAR cap_char error cap_char   (rule 24)
    name_seq  ->  name_seq . L_PAR cap_char R_PAR   (rule 25)
    name_seq  ->  name_seq . L_PAR cap_char error   (rule 26)

    L_PAR	shift, and go to state 17

    $default	reduce using rule 14 (module_name)



state 10

    name_sequence  ->  cap_char . L_PAR cap_char R_PAR   (rule 16)
    name_sequence  ->  cap_char . L_PAR cap_char error   (rule 17)

    L_PAR	shift, and go to state 18



state 11

    nls  ->  '\n' .   (rule 9)

    $default	reduce using rule 9 (nls)



state 12

    module  ->  error nls . hoare_trees   (rule 4)

    RETURN	shift, and go to state 19
    INDENT	shift, and go to state 20

    hoare_trees	go to state 21
    hoare_tree	go to state 22
    para	go to state 23
    input_def_sec	go to state 24
    analysis_tree	go to state 25
    output_def_sec	go to state 26
    return	go to state 27



state 13

    name_seq  ->  L_PAR cap_char . R_PAR cap_char   (rule 21)
    name_seq  ->  L_PAR cap_char . error cap_char   (rule 22)

    error	shift, and go to state 28
    R_PAR	shift, and go to state 29



state 14

    modules  ->  modules module .   (rule 2)

    $default	reduce using rule 2 (modules)



state 15

    module  ->  module_name nls . hoare_trees   (rule 3)

    RETURN	shift, and go to state 19
    INDENT	shift, and go to state 20

    hoare_trees	go to state 30
    hoare_tree	go to state 22
    para	go to state 23
    input_def_sec	go to state 24
    analysis_tree	go to state 25
    output_def_sec	go to state 26
    return	go to state 27



state 16

    name_sequence  ->  name_sequence cap_char . L_PAR cap_char R_PAR   (rule 18)
    name_sequence  ->  name_sequence cap_char . L_PAR cap_char error   (rule 19)
    name_sequence  ->  name_sequence cap_char . L_PAR cap_char R_PAR cap_char   (rule 20)

    L_PAR	shift, and go to state 31



state 17

    name_seq  ->  name_seq L_PAR . cap_char R_PAR cap_char   (rule 23)
    name_seq  ->  name_seq L_PAR . cap_char error cap_char   (rule 24)
    name_seq  ->  name_seq L_PAR . cap_char R_PAR   (rule 25)
    name_seq  ->  name_seq L_PAR . cap_char error   (rule 26)

    CAP_C	shift, and go to state 4

    cap_char	go to state 32



state 18

    name_sequence  ->  cap_char L_PAR . cap_char R_PAR   (rule 16)
    name_sequence  ->  cap_char L_PAR . cap_char error   (rule 17)

    CAP_C	shift, and go to state 4

    cap_char	go to state 33



state 19

    return  ->  RETURN . nls   (rule 36)
    return  ->  RETURN . operators nls   (rule 37)
    return  ->  RETURN . error nls   (rule 38)

    error	shift, and go to state 34
    RANGE	shift, and go to state 35
    '\n'	shift, and go to state 11
    '#' 	shift, and go to state 36
    '*' 	shift, and go to state 37
    '+' 	shift, and go to state 38

    nls 	go to state 39
    operators	go to state 40
    operator	go to state 41
    sequence_no	go to state 42
    sequen	go to state 43
    disc_union	go to state 44



state 20

    para  ->  INDENT . REFER nls   (rule 27)
    para  ->  INDENT . error nls   (rule 28)
    para  ->  INDENT . REFER error   (rule 29)
    return  ->  INDENT . MATCH nls   (rule 39)
    return  ->  INDENT . error nls   (rule 40)

    error	shift, and go to state 45
    REFER	shift, and go to state 46
    MATCH	shift, and go to state 47



state 21

    module  ->  error nls hoare_trees .   (rule 4)
    hoare_trees  ->  hoare_trees . hoare_tree   (rule 6)

    RETURN	shift, and go to state 19
    INDENT	shift, and go to state 20

    $default	reduce using rule 4 (module)

    hoare_tree	go to state 48
    para	go to state 23
    input_def_sec	go to state 24
    analysis_tree	go to state 25
    output_def_sec	go to state 26
    return	go to state 27



state 22

    hoare_trees  ->  hoare_tree .   (rule 5)

    $default	reduce using rule 5 (hoare_trees)



state 23

    analysis_tree  ->  para . node_set   (rule 32)

    INDENT	shift, and go to state 49

    node_set	go to state 50
    Indent	go to state 51
    indent	go to state 52



state 24

    hoare_tree  ->  input_def_sec .   (rule 7)
    input_def_sec  ->  input_def_sec . analysis_tree   (rule 31)

    INDENT	shift, and go to state 53

    INDENT	[reduce using rule 7 (hoare_tree)]
    $default	reduce using rule 7 (hoare_tree)

    para	go to state 23
    analysis_tree	go to state 54



state 25

    input_def_sec  ->  analysis_tree .   (rule 30)

    $default	reduce using rule 30 (input_def_sec)



state 26

    hoare_tree  ->  output_def_sec .   (rule 8)

    $default	reduce using rule 8 (hoare_tree)



state 27

    output_def_sec  ->  return . syn_tree_set   (rule 33)

    INDENT	shift, and go to state 49

    syn_tree_set	go to state 55
    node_set	go to state 56
    Indent	go to state 51
    indent	go to state 52



state 28

    name_seq  ->  L_PAR cap_char error . cap_char   (rule 22)

    CAP_C	shift, and go to state 4

    cap_char	go to state 57



state 29

    name_seq  ->  L_PAR cap_char R_PAR . cap_char   (rule 21)

    CAP_C	shift, and go to state 4

    cap_char	go to state 58



state 30

    module  ->  module_name nls hoare_trees .   (rule 3)
    hoare_trees  ->  hoare_trees . hoare_tree   (rule 6)

    RETURN	shift, and go to state 19
    INDENT	shift, and go to state 20

    $default	reduce using rule 3 (module)

    hoare_tree	go to state 48
    para	go to state 23
    input_def_sec	go to state 24
    analysis_tree	go to state 25
    output_def_sec	go to state 26
    return	go to state 27



state 31

    name_sequence  ->  name_sequence cap_char L_PAR . cap_char R_PAR   (rule 18)
    name_sequence  ->  name_sequence cap_char L_PAR . cap_char error   (rule 19)
    name_sequence  ->  name_sequence cap_char L_PAR . cap_char R_PAR cap_char   (rule 20)

    CAP_C	shift, and go to state 4

    cap_char	go to state 59



state 32

    name_seq  ->  name_seq L_PAR cap_char . R_PAR cap_char   (rule 23)
    name_seq  ->  name_seq L_PAR cap_char . error cap_char   (rule 24)
    name_seq  ->  name_seq L_PAR cap_char . R_PAR   (rule 25)
    name_seq  ->  name_seq L_PAR cap_char . error   (rule 26)

    error	shift, and go to state 60
    R_PAR	shift, and go to state 61



state 33

    name_sequence  ->  cap_char L_PAR cap_char . R_PAR   (rule 16)
    name_sequence  ->  cap_char L_PAR cap_char . error   (rule 17)

    error	shift, and go to state 62
    R_PAR	shift, and go to state 63



state 34

    return  ->  RETURN error . nls   (rule 38)

    '\n'	shift, and go to state 11

    nls 	go to state 64



state 35

    operator  ->  RANGE .   (rule 56)

    $default	reduce using rule 56 (operator)



state 36

    sequence_no  ->  '#' .   (rule 57)

    $default	reduce using rule 57 (sequence_no)



state 37

    sequen  ->  '*' .   (rule 58)

    $default	reduce using rule 58 (sequen)



state 38

    disc_union  ->  '+' .   (rule 59)

    $default	reduce using rule 59 (disc_union)



state 39

    return  ->  RETURN nls .   (rule 36)

    $default	reduce using rule 36 (return)



state 40

    return  ->  RETURN operators . nls   (rule 37)

    '\n'	shift, and go to state 11

    nls 	go to state 65



state 41

    operators  ->  operator .   (rule 49)
    operators  ->  operator . sequence_no   (rule 50)

    '#' 	shift, and go to state 36

    $default	reduce using rule 49 (operators)

    sequence_no	go to state 66



state 42

    operators  ->  sequence_no .   (rule 51)

    $default	reduce using rule 51 (operators)



state 43

    operator  ->  sequen .   (rule 53)
    operator  ->  sequen . disc_union   (rule 54)

    '+' 	shift, and go to state 38

    $default	reduce using rule 53 (operator)

    disc_union	go to state 67



state 44

    operator  ->  disc_union .   (rule 52)
    operator  ->  disc_union . sequen   (rule 55)

    '*' 	shift, and go to state 37

    $default	reduce using rule 52 (operator)

    sequen	go to state 68



state 45

    para  ->  INDENT error . nls   (rule 28)
    return  ->  INDENT error . nls   (rule 40)

    '\n'	shift, and go to state 11

    nls 	go to state 69



state 46

    para  ->  INDENT REFER . nls   (rule 27)
    para  ->  INDENT REFER . error   (rule 29)

    error	shift, and go to state 70
    '\n'	shift, and go to state 11

    nls 	go to state 71



state 47

    return  ->  INDENT MATCH . nls   (rule 39)

    '\n'	shift, and go to state 11

    nls 	go to state 72



state 48

    hoare_trees  ->  hoare_trees hoare_tree .   (rule 6)

    $default	reduce using rule 6 (hoare_trees)



state 49

    indent  ->  INDENT .   (rule 80)

    $default	reduce using rule 80 (indent)



state 50

    analysis_tree  ->  para node_set .   (rule 32)
    node_set  ->  node_set . Indent node_name nls   (rule 45)
    node_set  ->  node_set . Indent error nls   (rule 46)
    node_set  ->  node_set . Indent node_name operators nls   (rule 47)
    node_set  ->  node_set . Indent error operators nls   (rule 48)

    INDENT	shift, and go to state 49

    INDENT	[reduce using rule 32 (analysis_tree)]
    $default	reduce using rule 32 (analysis_tree)

    Indent	go to state 73
    indent	go to state 52



state 51

    node_set  ->  Indent . node_name nls   (rule 41)
    node_set  ->  Indent . error nls   (rule 42)
    node_set  ->  Indent . node_name operators nls   (rule 43)
    node_set  ->  Indent . error operators nls   (rule 44)

    error	shift, and go to state 74
    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 78
    REFER	shift, and go to state 79
    MATCH	shift, and go to state 80
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    primitives	go to state 82
    module_call	go to state 83
    node_name	go to state 84
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 89



state 52

    Indent  ->  indent .   (rule 79)
    indent  ->  indent . INDENT   (rule 81)

    INDENT	shift, and go to state 90

    $default	reduce using rule 79 (Indent)



state 53

    para  ->  INDENT . REFER nls   (rule 27)
    para  ->  INDENT . error nls   (rule 28)
    para  ->  INDENT . REFER error   (rule 29)

    error	shift, and go to state 91
    REFER	shift, and go to state 46



state 54

    input_def_sec  ->  input_def_sec analysis_tree .   (rule 31)

    $default	reduce using rule 31 (input_def_sec)



state 55

    output_def_sec  ->  return syn_tree_set .   (rule 33)
    syn_tree_set  ->  syn_tree_set . node_set   (rule 35)

    INDENT	shift, and go to state 49

    INDENT	[reduce using rule 33 (output_def_sec)]
    $default	reduce using rule 33 (output_def_sec)

    node_set	go to state 92
    Indent	go to state 51
    indent	go to state 52



state 56

    syn_tree_set  ->  node_set .   (rule 34)
    node_set  ->  node_set . Indent node_name nls   (rule 45)
    node_set  ->  node_set . Indent error nls   (rule 46)
    node_set  ->  node_set . Indent node_name operators nls   (rule 47)
    node_set  ->  node_set . Indent error operators nls   (rule 48)

    INDENT	shift, and go to state 49

    INDENT	[reduce using rule 34 (syn_tree_set)]
    $default	reduce using rule 34 (syn_tree_set)

    Indent	go to state 73
    indent	go to state 52



state 57

    name_seq  ->  L_PAR cap_char error cap_char .   (rule 22)

    $default	reduce using rule 22 (name_seq)



state 58

    name_seq  ->  L_PAR cap_char R_PAR cap_char .   (rule 21)

    $default	reduce using rule 21 (name_seq)



state 59

    name_sequence  ->  name_sequence cap_char L_PAR cap_char . R_PAR   (rule 18)
    name_sequence  ->  name_sequence cap_char L_PAR cap_char . error   (rule 19)
    name_sequence  ->  name_sequence cap_char L_PAR cap_char . R_PAR cap_char   (rule 20)

    error	shift, and go to state 93
    R_PAR	shift, and go to state 94



state 60

    name_seq  ->  name_seq L_PAR cap_char error . cap_char   (rule 24)
    name_seq  ->  name_seq L_PAR cap_char error .   (rule 26)

    CAP_C	shift, and go to state 4

    $default	reduce using rule 26 (name_seq)

    cap_char	go to state 95



state 61

    name_seq  ->  name_seq L_PAR cap_char R_PAR . cap_char   (rule 23)
    name_seq  ->  name_seq L_PAR cap_char R_PAR .   (rule 25)

    CAP_C	shift, and go to state 4

    $default	reduce using rule 25 (name_seq)

    cap_char	go to state 96



state 62

    name_sequence  ->  cap_char L_PAR cap_char error .   (rule 17)

    $default	reduce using rule 17 (name_sequence)



state 63

    name_sequence  ->  cap_char L_PAR cap_char R_PAR .   (rule 16)

    $default	reduce using rule 16 (name_sequence)



state 64

    return  ->  RETURN error nls .   (rule 38)

    $default	reduce using rule 38 (return)



state 65

    return  ->  RETURN operators nls .   (rule 37)

    $default	reduce using rule 37 (return)



state 66

    operators  ->  operator sequence_no .   (rule 50)

    $default	reduce using rule 50 (operators)



state 67

    operator  ->  sequen disc_union .   (rule 54)

    $default	reduce using rule 54 (operator)



state 68

    operator  ->  disc_union sequen .   (rule 55)

    $default	reduce using rule 55 (operator)



state 69

    para  ->  INDENT error nls .   (rule 28)
    return  ->  INDENT error nls .   (rule 40)

    INDENT	reduce using rule 28 (para)
    INDENT	[reduce using rule 40 (return)]
    '*' 	reduce using rule 28 (para)
    '*' 	[reduce using rule 40 (return)]
    $default	reduce using rule 28 (para)



state 70

    para  ->  INDENT REFER error .   (rule 29)

    $default	reduce using rule 29 (para)



state 71

    para  ->  INDENT REFER nls .   (rule 27)

    $default	reduce using rule 27 (para)



state 72

    return  ->  INDENT MATCH nls .   (rule 39)

    $default	reduce using rule 39 (return)



state 73

    node_set  ->  node_set Indent . node_name nls   (rule 45)
    node_set  ->  node_set Indent . error nls   (rule 46)
    node_set  ->  node_set Indent . node_name operators nls   (rule 47)
    node_set  ->  node_set Indent . error operators nls   (rule 48)

    error	shift, and go to state 97
    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 78
    REFER	shift, and go to state 79
    MATCH	shift, and go to state 80
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    primitives	go to state 82
    module_call	go to state 83
    node_name	go to state 98
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 89



state 74

    node_set  ->  Indent error . nls   (rule 42)
    node_set  ->  Indent error . operators nls   (rule 44)

    RANGE	shift, and go to state 35
    '\n'	shift, and go to state 11
    '#' 	shift, and go to state 36
    '*' 	shift, and go to state 37
    '+' 	shift, and go to state 38

    nls 	go to state 99
    operators	go to state 100
    operator	go to state 41
    sequence_no	go to state 42
    sequen	go to state 43
    disc_union	go to state 44



state 75

    non_argu_prim  ->  NEW_LINE .   (rule 67)

    $default	reduce using rule 67 (non_argu_prim)



state 76

    non_argu_prim  ->  NEW_PAGE .   (rule 68)

    $default	reduce using rule 68 (non_argu_prim)



state 77

    m_name_seq  ->  L_PAR . t_node_name R_PAR cap_char   (rule 75)

    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 101
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    t_node_name	go to state 102
    primitives	go to state 82
    module_call	go to state 103
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 104



state 78

    node_name  ->  LITERALS .   (rule 64)

    $default	reduce using rule 64 (node_name)



state 79

    node_name  ->  REFER .   (rule 66)

    $default	reduce using rule 66 (node_name)



state 80

    node_name  ->  MATCH .   (rule 63)

    $default	reduce using rule 63 (node_name)



state 81

    non_argu_prim  ->  P_PARALLEL .   (rule 69)

    $default	reduce using rule 69 (non_argu_prim)



state 82

    module_call  ->  primitives .   (rule 61)

    $default	reduce using rule 61 (module_call)



state 83

    node_name  ->  module_call .   (rule 65)

    $default	reduce using rule 65 (node_name)



state 84

    node_set  ->  Indent node_name . nls   (rule 41)
    node_set  ->  Indent node_name . operators nls   (rule 43)

    RANGE	shift, and go to state 35
    '\n'	shift, and go to state 11
    '#' 	shift, and go to state 36
    '*' 	shift, and go to state 37
    '+' 	shift, and go to state 38

    nls 	go to state 105
    operators	go to state 106
    operator	go to state 41
    sequence_no	go to state 42
    sequen	go to state 43
    disc_union	go to state 44



state 85

    primitives  ->  non_argu_prim .   (rule 60)

    $default	reduce using rule 60 (primitives)



state 86

    module_call  ->  module_node .   (rule 62)

    $default	reduce using rule 62 (module_call)



state 87

    module_node  ->  m_name_sequence .   (rule 70)
    m_name_sequence  ->  m_name_sequence . cap_char L_PAR t_node_name R_PAR   (rule 73)
    m_name_sequence  ->  m_name_sequence . t_node_name L_PAR t_node_name R_PAR cap_char   (rule 74)

    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 101
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    L_PAR	[reduce using rule 70 (module_node)]
    $default	reduce using rule 70 (module_node)

    t_node_name	go to state 107
    primitives	go to state 82
    module_call	go to state 103
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 108



state 88

    module_node  ->  m_name_seq .   (rule 71)
    m_name_seq  ->  m_name_seq . L_PAR t_node_name R_PAR cap_char   (rule 76)
    m_name_seq  ->  m_name_seq . L_PAR t_node_name R_PAR   (rule 77)

    L_PAR	shift, and go to state 109

    L_PAR	[reduce using rule 71 (module_node)]
    $default	reduce using rule 71 (module_node)



state 89

    m_name_sequence  ->  cap_char . L_PAR t_node_name R_PAR   (rule 72)

    L_PAR	shift, and go to state 110



state 90

    indent  ->  indent INDENT .   (rule 81)

    $default	reduce using rule 81 (indent)



state 91

    para  ->  INDENT error . nls   (rule 28)

    '\n'	shift, and go to state 11

    nls 	go to state 111



state 92

    syn_tree_set  ->  syn_tree_set node_set .   (rule 35)
    node_set  ->  node_set . Indent node_name nls   (rule 45)
    node_set  ->  node_set . Indent error nls   (rule 46)
    node_set  ->  node_set . Indent node_name operators nls   (rule 47)
    node_set  ->  node_set . Indent error operators nls   (rule 48)

    INDENT	shift, and go to state 49

    INDENT	[reduce using rule 35 (syn_tree_set)]
    $default	reduce using rule 35 (syn_tree_set)

    Indent	go to state 73
    indent	go to state 52



state 93

    name_sequence  ->  name_sequence cap_char L_PAR cap_char error .   (rule 19)

    $default	reduce using rule 19 (name_sequence)



state 94

    name_sequence  ->  name_sequence cap_char L_PAR cap_char R_PAR .   (rule 18)
    name_sequence  ->  name_sequence cap_char L_PAR cap_char R_PAR . cap_char   (rule 20)

    CAP_C	shift, and go to state 4

    CAP_C	[reduce using rule 18 (name_sequence)]
    $default	reduce using rule 18 (name_sequence)

    cap_char	go to state 112



state 95

    name_seq  ->  name_seq L_PAR cap_char error cap_char .   (rule 24)

    $default	reduce using rule 24 (name_seq)



state 96

    name_seq  ->  name_seq L_PAR cap_char R_PAR cap_char .   (rule 23)

    $default	reduce using rule 23 (name_seq)



state 97

    node_set  ->  node_set Indent error . nls   (rule 46)
    node_set  ->  node_set Indent error . operators nls   (rule 48)

    RANGE	shift, and go to state 35
    '\n'	shift, and go to state 11
    '#' 	shift, and go to state 36
    '*' 	shift, and go to state 37
    '+' 	shift, and go to state 38

    nls 	go to state 113
    operators	go to state 114
    operator	go to state 41
    sequence_no	go to state 42
    sequen	go to state 43
    disc_union	go to state 44



state 98

    node_set  ->  node_set Indent node_name . nls   (rule 45)
    node_set  ->  node_set Indent node_name . operators nls   (rule 47)

    RANGE	shift, and go to state 35
    '\n'	shift, and go to state 11
    '#' 	shift, and go to state 36
    '*' 	shift, and go to state 37
    '+' 	shift, and go to state 38

    nls 	go to state 115
    operators	go to state 116
    operator	go to state 41
    sequence_no	go to state 42
    sequen	go to state 43
    disc_union	go to state 44



state 99

    node_set  ->  Indent error nls .   (rule 42)

    $default	reduce using rule 42 (node_set)



state 100

    node_set  ->  Indent error operators . nls   (rule 44)

    '\n'	shift, and go to state 11

    nls 	go to state 117



state 101

    t_node_name  ->  LITERALS .   (rule 11)

    $default	reduce using rule 11 (t_node_name)



state 102

    m_name_seq  ->  L_PAR t_node_name . R_PAR cap_char   (rule 75)

    R_PAR	shift, and go to state 118



state 103

    t_node_name  ->  module_call .   (rule 12)

    $default	reduce using rule 12 (t_node_name)



state 104

    t_node_name  ->  cap_char .   (rule 10)
    m_name_sequence  ->  cap_char . L_PAR t_node_name R_PAR   (rule 72)

    L_PAR	shift, and go to state 110

    $default	reduce using rule 10 (t_node_name)



state 105

    node_set  ->  Indent node_name nls .   (rule 41)

    $default	reduce using rule 41 (node_set)



state 106

    node_set  ->  Indent node_name operators . nls   (rule 43)

    '\n'	shift, and go to state 11

    nls 	go to state 119



state 107

    m_name_sequence  ->  m_name_sequence t_node_name . L_PAR t_node_name R_PAR cap_char   (rule 74)

    L_PAR	shift, and go to state 120



state 108

    t_node_name  ->  cap_char .   (rule 10)
    m_name_sequence  ->  cap_char . L_PAR t_node_name R_PAR   (rule 72)
    m_name_sequence  ->  m_name_sequence cap_char . L_PAR t_node_name R_PAR   (rule 73)

    L_PAR	shift, and go to state 121

    L_PAR	[reduce using rule 10 (t_node_name)]
    $default	reduce using rule 10 (t_node_name)



state 109

    m_name_seq  ->  m_name_seq L_PAR . t_node_name R_PAR cap_char   (rule 76)
    m_name_seq  ->  m_name_seq L_PAR . t_node_name R_PAR   (rule 77)

    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 101
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    t_node_name	go to state 122
    primitives	go to state 82
    module_call	go to state 103
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 104



state 110

    m_name_sequence  ->  cap_char L_PAR . t_node_name R_PAR   (rule 72)

    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 101
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    t_node_name	go to state 123
    primitives	go to state 82
    module_call	go to state 103
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 104



state 111

    para  ->  INDENT error nls .   (rule 28)

    $default	reduce using rule 28 (para)



state 112

    name_sequence  ->  name_sequence cap_char L_PAR cap_char R_PAR cap_char .   (rule 20)

    $default	reduce using rule 20 (name_sequence)



state 113

    node_set  ->  node_set Indent error nls .   (rule 46)

    $default	reduce using rule 46 (node_set)



state 114

    node_set  ->  node_set Indent error operators . nls   (rule 48)

    '\n'	shift, and go to state 11

    nls 	go to state 124



state 115

    node_set  ->  node_set Indent node_name nls .   (rule 45)

    $default	reduce using rule 45 (node_set)



state 116

    node_set  ->  node_set Indent node_name operators . nls   (rule 47)

    '\n'	shift, and go to state 11

    nls 	go to state 125



state 117

    node_set  ->  Indent error operators nls .   (rule 44)

    $default	reduce using rule 44 (node_set)



state 118

    m_name_seq  ->  L_PAR t_node_name R_PAR . cap_char   (rule 75)

    CAP_C	shift, and go to state 4

    cap_char	go to state 126



state 119

    node_set  ->  Indent node_name operators nls .   (rule 43)

    $default	reduce using rule 43 (node_set)



state 120

    m_name_sequence  ->  m_name_sequence t_node_name L_PAR . t_node_name R_PAR cap_char   (rule 74)

    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 101
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    t_node_name	go to state 127
    primitives	go to state 82
    module_call	go to state 103
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 104



state 121

    m_name_sequence  ->  cap_char L_PAR . t_node_name R_PAR   (rule 72)
    m_name_sequence  ->  m_name_sequence cap_char L_PAR . t_node_name R_PAR   (rule 73)

    NEW_LINE	shift, and go to state 75
    NEW_PAGE	shift, and go to state 76
    L_PAR	shift, and go to state 77
    LITERALS	shift, and go to state 101
    CAP_C	shift, and go to state 4
    P_PARALLEL	shift, and go to state 81

    t_node_name	go to state 128
    primitives	go to state 82
    module_call	go to state 103
    non_argu_prim	go to state 85
    module_node	go to state 86
    m_name_sequence	go to state 87
    m_name_seq	go to state 88
    cap_char	go to state 104



state 122

    m_name_seq  ->  m_name_seq L_PAR t_node_name . R_PAR cap_char   (rule 76)
    m_name_seq  ->  m_name_seq L_PAR t_node_name . R_PAR   (rule 77)

    R_PAR	shift, and go to state 129



state 123

    m_name_sequence  ->  cap_char L_PAR t_node_name . R_PAR   (rule 72)

    R_PAR	shift, and go to state 130



state 124

    node_set  ->  node_set Indent error operators nls .   (rule 48)

    $default	reduce using rule 48 (node_set)



state 125

    node_set  ->  node_set Indent node_name operators nls .   (rule 47)

    $default	reduce using rule 47 (node_set)



state 126

    m_name_seq  ->  L_PAR t_node_name R_PAR cap_char .   (rule 75)

    $default	reduce using rule 75 (m_name_seq)



state 127

    m_name_sequence  ->  m_name_sequence t_node_name L_PAR t_node_name . R_PAR cap_char   (rule 74)

    R_PAR	shift, and go to state 131



state 128

    m_name_sequence  ->  cap_char L_PAR t_node_name . R_PAR   (rule 72)
    m_name_sequence  ->  m_name_sequence cap_char L_PAR t_node_name . R_PAR   (rule 73)

    R_PAR	shift, and go to state 132



state 129

    m_name_seq  ->  m_name_seq L_PAR t_node_name R_PAR . cap_char   (rule 76)
    m_name_seq  ->  m_name_seq L_PAR t_node_name R_PAR .   (rule 77)

    CAP_C	shift, and go to state 4

    $default	reduce using rule 77 (m_name_seq)

    cap_char	go to state 133



state 130

    m_name_sequence  ->  cap_char L_PAR t_node_name R_PAR .   (rule 72)

    $default	reduce using rule 72 (m_name_sequence)



state 131

    m_name_sequence  ->  m_name_sequence t_node_name L_PAR t_node_name R_PAR . cap_char   (rule 74)

    CAP_C	shift, and go to state 4

    cap_char	go to state 134



state 132

    m_name_sequence  ->  cap_char L_PAR t_node_name R_PAR .   (rule 72)
    m_name_sequence  ->  m_name_sequence cap_char L_PAR t_node_name R_PAR .   (rule 73)

    NEW_LINE	reduce using rule 72 (m_name_sequence)
    NEW_LINE	[reduce using rule 73 (m_name_sequence)]
    NEW_PAGE	reduce using rule 72 (m_name_sequence)
    NEW_PAGE	[reduce using rule 73 (m_name_sequence)]
    R_PAR	reduce using rule 73 (m_name_sequence)
    L_PAR	reduce using rule 72 (m_name_sequence)
    L_PAR	[reduce using rule 73 (m_name_sequence)]
    RANGE	reduce using rule 73 (m_name_sequence)
    LITERALS	reduce using rule 72 (m_name_sequence)
    LITERALS	[reduce using rule 73 (m_name_sequence)]
    CAP_C	reduce using rule 72 (m_name_sequence)
    CAP_C	[reduce using rule 73 (m_name_sequence)]
    P_PARALLEL	reduce using rule 72 (m_name_sequence)
    P_PARALLEL	[reduce using rule 73 (m_name_sequence)]
    P_ASEND_TO	reduce using rule 72 (m_name_sequence)
    P_ASEND_TO	[reduce using rule 73 (m_name_sequence)]
    P_ARECEIVE_FROM	reduce using rule 72 (m_name_sequence)
    P_ARECEIVE_FROM	[reduce using rule 73 (m_name_sequence)]
    '\n'	reduce using rule 73 (m_name_sequence)
    '#' 	reduce using rule 72 (m_name_sequence)
    '#' 	[reduce using rule 73 (m_name_sequence)]
    '+' 	reduce using rule 73 (m_name_sequence)
    $default	reduce using rule 72 (m_name_sequence)



state 133

    m_name_seq  ->  m_name_seq L_PAR t_node_name R_PAR cap_char .   (rule 76)

    $default	reduce using rule 76 (m_name_seq)



state 134

    m_name_sequence  ->  m_name_sequence t_node_name L_PAR t_node_name R_PAR cap_char .   (rule 74)

    $default	reduce using rule 74 (m_name_sequence)



state 135

    $   	go to state 136



state 136

    $default	accept
