/*
 *  Program Name:	desc_table.h
 *  Written Date:	Aug. 18, 1990
 *  Modified Date:	Nov. 15, 1990
 *  Designer:		Lih-shiun Timothy Lee  at ASU
 *
 */

/*  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *  The following table is for use of getting the column of each input
 *  character whose corresponding value is the entry of column of transition
 *  table
 *
 */

static	short	Tt_Index[] = {

     /*  0   1   2   3   4   5   6   7   8   9   */

	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  /*   0 -  9             */
	 5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  /*  10 - 19 :  10-> LF  */
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  /*  20 - 29             */
	 0,  0,  6,  1,  1, 14,  1,  1,  1,  7,  /*  30 - 39 :  	 */
	 9, 10, 12, 13,  1,  1, 11,  1,  2,  2,  /*  40 - 49    48-> "0" */
	 2,  2,  2,  2,  2,  2,  2,  2,  1,  1,  /*  50 - 59             */
	 1,  1,  1,  1,  1,  3,  3,  3,  3,  3,  /*  60 - 69    65-> "A" */
	 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  /*  70 - 79             */
	 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  /*  80 - 89             */
	 3,  1,  1,  1,  1,  8,  1,  4,  4,  4,  /*  90 - 99    97-> "a" */
         4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  /* 100 -109             */
         4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  /* 110 -119             */
         4,  4,  4,  1,  1,  1,  1,  1           /* 120 -127             */

        };

/*  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *  This transition table is only for Lexical Analyzer which can scan the
 *  correct/invalid input which is stored for tree building or error(s)
 *  displaying
 *
 *  The descriptions of the actions used are outlined as follow:
 *
 *   Action			    O u t l i n e d
 *    Code			D e s c r i p t i o n s
 *   ------	-------------------------------------------------------------
 *	300	single CR encountered or balnk(s) followed by CR
 *	301	just add 1 to "blank_counter"; continue the next char
 *	302	just append a legal char to the TOKEN; continue the next char
 *		including blanks in-between range no.
 *	303	calculate the level no. based on the no. of blanks ( a
 *		multiple of 5); decide the indentation is correct or not; if
 *		not, then issue an error (invalid indentation) and go on for
 *		the next input line string; otherwise, store this level no and
 *		append a current char to the TOKEN, and continue the next char
 *	304	skip blank(s) trailing blank(s); continue the next char
 *	305	store ( or ); continue the next char
 *	306	store + or #; continue the next char
 *	307	store *; store 0 as Lower bound and 0x7fffffff as Upper bound;
 *		continue the next char
 *	308	store the Lower bound value; continue the next char
 *	309	store the Upper bound value; continue the next char
 *	310	store a period within the range no.; continue the next char
 *	311	indicate NO Upper bound; store 0x7fffffff as upper bound;
 *		continue the next char
 *
 *	351	legal char(s) ending with a CR; Literal
 *	352	legal char(s) ending with a CR; Direct Product (Match)
 *	353	legal char(s) ending with a CR; Discriminated Union (Match)
 *	354	legal char(s) ending with a CR; Sequence (Match)
 *	355	legal char(s) ending with a CR; Sequence Union (*+) (Match)
 *	356	legal char(s) ending with a CR; Sequence Range (n..m) (Match)
 *	357	legal char(s) ending with a CR; Module Title or Direct Product
 *		(Reference node); check the balance of parenthesis, quote, etc
 *	358	legal char(s) ending with a CR; Discriminated Union (Reference)
 *	359	legal char(s) ending with a CR; Sequence (Reference)
 *	360	legal char(s) ending with a CR; Sequence Union (*+) (Reference)
 *	361	legal char(s) ending with a CR; Sequence Range (Reference)
 *	362	legal char(s) ending with a CR; Sequence # (Reference)
 *
 *	399	an syntax error occurred; skip the rest of input string (stop
 *		scanning); print the line no. and error code to the window
 *
 *	Note:	Starting from actions 351 to 399, do read the next input
 *		string, if any, after completing their own processes
 *
 */

#define	TT_ROW	51  /* the no. of the states */
#define	TT_COL	15  /* the category of the terminal symbols */

struct IntermediateStruct{
	short	next_state;
	short	action;
	short	error_code;
};

static  struct IntermediateStruct Tt_Array[TT_ROW] [TT_COL] = {

	{ /* row 0 */
	 { 0,399, 1},
	 { 0,399, 1}, { 0,399, 1}, {22,302, 0}, { 0,399, 1}, { 0,300, 0},
	 { 1,301, 0}, { 0,399, 1}, {21,302, 0}, {23,302, 0}, { 0,399, 1},
	 { 0,399, 1}, { 0,399, 1}, { 0,399, 1}, { 0,399, 1}
	},

	{ /* row 1 */
	 { 0,399, 2},
	 { 0,399, 2}, { 0,399, 2}, {22,303, 0}, { 4,303, 0}, { 0,300, 0},
	 { 1,301, 0}, { 2,303, 0}, {21,303, 0}, {23,303, 0}, { 0,399, 2},
	 { 0,399, 2}, { 0,399, 2}, { 0,399, 2}, { 0,399, 2}
	},

	{ /* row 2 */
	 { 0,399, 3},
	 { 2,302, 0}, { 2,302, 0}, { 2,302, 0}, { 2,302, 0}, { 0,399, 4},
	 { 2,302, 0}, { 3,302, 0}, { 2,302, 0}, { 2,302, 0}, { 2,302, 0},
	 { 2,302, 0}, { 2,302, 0}, { 2,302, 0}, { 2,302, 0}
	},

	{ /* row 3  ( Literal ) */
	 { 0,399, 5},
	 { 0,399, 5}, { 0,399, 5}, { 0,399, 5}, { 0,399, 5}, { 0,351, 0},
	 { 3,304, 0}, { 0,399, 5}, { 0,399, 5}, { 0,399, 5}, { 0,399, 5},
	 { 0,399, 5}, { 0,399, 5}, { 0,399, 5}, { 0,399, 5}
	},

	{ /* row 4 */
	 { 0,399, 6},
	 { 0,399, 6}, { 0,399, 6}, { 0,399, 6}, { 4,302, 0}, { 0,352, 0},
	 { 5,304, 0}, { 0,399, 6}, { 6,302, 0}, {11,305, 0}, { 0,399, 6},
	 { 0,399, 6}, { 8,307, 0}, { 7,306, 0}, { 0,399, 6}
	},

	{ /* row 5 */
	 { 0,399, 7},
	 { 0,399, 7}, { 0,399, 7}, { 0,399, 7}, { 0,399, 7}, { 0,352, 0},
	 { 5,304, 0}, { 0,399, 7}, { 0,399, 7}, { 0,399, 7}, { 0,399, 7},
	 { 0,399, 7}, { 0,399, 7}, { 0,399, 7}, { 0,399, 7}
	},

	{ /* row 6 */
	 { 0,399, 7},
	 { 0,399, 7}, { 0,399, 7}, { 0,399, 7}, { 4,302, 0}, { 0,352, 0},
	 { 5,304, 0}, { 0,399, 7}, { 6,302, 0}, { 0,399, 7}, { 0,399, 7},
	 { 0,399, 7}, { 0,399, 7}, { 0,399, 7}, { 0,399, 7}
	},

	{ /* row 7 */
	 { 0,399, 8},
	 { 0,399, 8}, { 0,399, 8}, { 0,399, 8}, { 0,399, 8}, { 0,353, 0},
	 { 7,304, 0}, { 0,399, 8}, { 0,399, 8}, { 0,399, 8}, { 0,399, 8},
	 { 0,399, 8}, { 0,399, 8}, { 0,399, 8}, { 0,399, 8}
	},

	{ /* row 8 */
	 { 0,399, 9},
	 { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,354, 0},
	 { 9,304, 0}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9},
	 { 0,399, 9}, { 0,399, 9}, {10,306, 0}, { 0,399, 9}
	},

	{ /* row 9 */
	 { 0,399, 9},
	 { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,354, 0},
	 { 9,304, 0}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9},
	 { 0,399, 9}, { 0,399, 9}, { 0,399, 9}, { 0,399, 9}
	},

	{ /* row 10 */
	 { 0,399,10},
	 { 0,399,10}, { 0,399,10}, { 0,399,10}, { 0,399,10}, { 0,355, 0},
	 {10,304, 0}, { 0,399,10}, { 0,399,10}, { 0,399,10}, { 0,399,10},
	 { 0,399,10}, { 0,399,10}, { 0,399,10}, { 0,399,10}
	},

	{ /* row 11 */
	 { 0,399,11},
	 { 0,399,11}, {13,308, 0}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {12,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 12 */
	 { 0,399,11},
	 { 0,399,11}, {13,308, 0}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {12,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 13 */
	 { 0,399,11},
	 { 0,399,11}, {13,308, 0}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {14,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11},
	 {15,310, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 14 */
	 { 0,399,11},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {14,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11},
	 {15,310, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 15 */
	 { 0,399,11},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11},
	 {16,310, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 16 */
	 { 0,399,11},
	 { 0,399,11}, {18,309, 0}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {17,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, {20,305, 0},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 17 */
	 { 0,399,11},
	 { 0,399,11}, {18,309, 0}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {17,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, {20,311, 0},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 18 */
	 { 0,399,11},
	 { 0,399,11}, {18,309, 0}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {19,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, {20,305, 0},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 19 */
	 { 0,399,11},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,13},
	 {19,302, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, {20,305, 0},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}
	},

	{ /* row 20 */
	 { 0,399,11},
	 { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,356, 0},
	 { 9,304, 0}, { 0,399,11}, { 0,399,11}, { 0,399,11}, { 0,399,11},
	 { 0,399,11}, { 0,399,11}, {10,306, 0}, { 0,399,11}
	},

	{ /* row 21 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {22,302, 0}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, {21,302, 0}, {23,302, 0}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 22 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {22,302, 0}, { 0,399,17}, { 0,357, 0},
	 {33,304, 0}, { 0,399,17}, {32,302, 0}, {39,305, 0}, { 0,399,17},
	 { 0,399,17}, {36,307, 0}, {35,306, 0}, {34,306, 0}
	},

	{ /* row 23 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {24,302, 0}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, {27,302, 0}, {25,302, 0}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 24 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {24,302, 0}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, {25,302, 0}, { 0,399,17}, {31,302, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 25 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {26,302, 0}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, {25,302, 0}, { 0,399,17}, {31,302, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 26 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {26,302, 0}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, {25,302, 0}, { 0,399,17}, {31,302, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 27 */
	 { 0,399,17},
	 { 0,399,17}, {28,302, 0}, {29,302, 0}, {29,302, 0}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 28 */
	 { 0,399,17},
	 { 0,399,17}, {28,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, {30,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 29 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {29,302, 0}, {29,302, 0}, { 0,399,16},
	 { 0,399,17}, {30,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 30 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, {31,302, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 31 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,357, 0},
	 {33,304, 0}, { 0,399,17}, {32,302, 0}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, {36,307, 0}, {35,306, 0}, {34,306, 0}
	},

	{ /* row 32 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {22,302, 0}, { 0,399,17}, { 0,357, 0},
	 {33,304, 0}, { 0,399,17}, {32,302, 0}, {23,302, 0}, { 0,399,17},
	 { 0,399,17}, {36,307, 0}, {35,306, 0}, {34,306, 0}
	},

	{ /* row 33 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,357, 0},
	 {33,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 34 (Sequence Range) */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,362, 0},
	 {34,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 35 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,358, 0},
	 {35,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 36 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,359, 0},
	 {37,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {38,306, 0}, { 0,399,17}
	},

	{ /* row 37 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,359, 0},
	 {37,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 38 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,360, 0},
	 {38,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 39 */
	 { 0,399,17},
	 { 0,399,17}, {41,308, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {40,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 40 */
	 { 0,399,17},
	 { 0,399,17}, {41,308, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {40,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 41 */
	 { 0,399,17},
	 { 0,399,17}, {41,308, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {42,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 {43,310, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 42 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {42,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 {43,310, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 43 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 {44,310, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 44 */
	 { 0,399,17},
	 { 0,399,17}, {46,309, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {45,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, {48,305, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 45 */
	 { 0,399,17},
	 { 0,399,17}, {46,309, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {45,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, {48,311, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 46 */
	 { 0,399,17},
	 { 0,399,17}, {46,309, 0}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {47,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, {48,305, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 47 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,16},
	 {47,302, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, {48,305, 0},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 48 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,361, 0},
	 {49,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, {50,306, 0}, { 0,399,17}
	},

	{ /* row 49 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,361, 0},
	 {49,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	},

	{ /* row 50 */
	 { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,360, 0},
	 {50,304, 0}, { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17},
	 { 0,399,17}, { 0,399,17}, { 0,399,17}, { 0,399,17}
	}

	};  /*  the end of Tt_Array[][]  */

/*  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *  The following information is joined as part of error codes to give the
 *  complete meaning
 *
 */

static	char	* Error_Supplement[]
      ={
	/*  0 */ "Control Character",
	/*  1 */ "Special Character",
	/*  2 */ "Digit Number",
	/*  3 */ "Upper-case Letter",
	/*  4 */ "Lower-case Letter",
	/*  5 */ "Carriage Return",
	/*  6 */ "Blank",
	/*  7 */ "Single Quote",
	/*  8 */ "Underscore",
	/*  9 */ "Left Parenthesis",
	/* 10 */ "Right Parenthesis",
	/* 11 */ "Period",
	/* 12 */ "Asterisk",
	/* 13 */ "Plus",
	/* 14 */ "Pound Sign"
       };

/*  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *  The following error codes are used to help the Descartes designer
 *  understand what the error is and give the brief idea for the error;
 *  for more details about the correction please refer to the action of error.
 *
 */

static	char  *	Error_Code[]
      ={
	/*  0 */ "",   /* no error at all */
	/*  1 */ "%s used is not part of reference node (or module title)",
	/*  2 */ "invalid %s used for either reference or match node",
	/*  3 */ "invalid %s used in literal node",
	/*  4 */ "missing %s at the end of literal node",
	/*  5 */ "an invalid %s occurred in literal node",
	/*  6 */ "an invalid %s occurred in match node",
	/*  7 */ "an invalid %s occurred in match node (direct product)",
	/*  8 */ "an invalid %s occurred in match node (discriminated union)",
	/*  9 */ "an invalid %s occurred in match node (sequence)",
	/* 10 */ "an invalid %s occurred in match node (sequence union)",
	/* 11 */ "an invalid %s occurred in match node (sequence range)",
	/* 12 */ "illegal indentation occurred; must be a multiple of 5",
	/* 13 */ "illegal format for sequence range; use either (1..100) or \
(1..) as example",
	/* 14 */ "illegal lower bound; lower bound must be > 0",
	/* 15 */ "illegal lower bound because lower bound > upper bound",
	/* 16 */ "incomplete reference node",
	/* 17 */ "an invalid %s occurred in reference node",
	"NOT  YET"
       };

/*  -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 *  The following error actions are to give the Descartes designer the
 *  necessary information for correcting the error(s) whose codes are
 *  shown as above
 *
 */

static	char  *	Error_Action[]
      ={
	"",
	"Check the exact number of blanks (spaces) for indentation",
	"check the Descartes syntax rules",
	"only use either UPPER or LOWER case for a node name at a time",
	"check the Descartes syntax rules",
	"add a ( before the parameter or the range number",
	"add a ) after the parameter or the range number",
	"add a [ before the module title",
	"add a ] after the module title",
	"add a ' in the beginning",
	"add a ' at the end",
	"use the proper dot '.' to indicate the range",
	"use the proper range number",
	"NOT  YET"
       };

