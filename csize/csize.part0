From lott@informatik.uni-kl.de (Christopher Lott)
Newsgroups: comp.sources.reviewed
Subject: v04i001:  csize - A C language code counter, Part00/04
Date: 17 Oct 1994 11:47:58 -0500

Submitted-by: lott@informatik.uni-kl.de (Christopher Lott)
Posting-number: Volume 4, Issue 1
Archive-name: csize/part00
Environment: ANSI-C, Flex

!!!! comp.sources.reviewed is back (and with a vengeance) ;-) !!!!

Number of Reviewers:  18
Number of Reviews Submitted: 5

Note - After the reviews included below where written, the author opted to
make corrections based on the reviews and resubmit the package.  Although
a number of people retrieved the package for review, no new reviews were 
submitted.  I personally verified that the software continued to work as
advertised under SunOS and Linux. Note that the software requires flex
version 2.4.7 to pass all its internal tests correctly, however the author
has included a flex .c output you can link in if you do not have the
correct version of flex.  The following is a excerpt from the 
changelog noting the changes since the review:

Sep	 2 08:37:36 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)

	* csize.man: added mention that trigraphs are not supported, and
	  neither dollar signs nor at signs are accepted in identifiers.
	  Changed discussion of handling comments on preprocessor lines.

Thu Sep	 1 14:54:43 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)

	* Version 1.11
	* Responded to bug report from Sven-Ove Westberg <sow@cad.luth.se>
	  who correctly pointed out that csize was not properly handling
	  comments that occur on the same line as a preprocessor
	  directive.  Extended function pp_dir() to handle comments.

Sun Aug 21 13:16:15 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
	* Version 1.10
	* Shortened file names to stay within the 14-character constraint
	  imposed by some sytems.
	* Added a missing closing quotation mark in the test directory
	  Makefile
	* Adapted to version 2.4.7 of flex.
	* Updated the README to admit that I do not fully utilize the
	  capabilities of the scanner.
	* Reworked the changelog into Gnu's accepted format
	* Moved function names in C files to column 1 to help ansi2knr
	* Moved Makefile to Makefile.in, reworked it for autoconf
	* Created configure.in so that I can use autoconf
	* Copied aclocal.m4 from GNUm4-1.2 directory
	* Created configure using autoconf
	* Updated the INSTALL file to state clearly the dependence on UNIX
	  systems, and to reflect the addition of configure.
	* Copied the install.sh file from GNUm4-1.2 for SYSV people.


Submitted Reviews
-----------------


By: dave_boyd@sterling.com

   I reviewed the csize package under both SunOS 4.1.3 and Linux.  The
port to Linux was very straightforward with the exception of differences
in the getopt function which produced an annoying but non-fatel error 
when running the regression test suite.

   The supplied regression test suite appeared to sufficiently test  the
package (see path coverage report attached).  The modules not tested by
the test suite appeared to be generated by flex and simply were not
utilized by this program.  The cyclomatic and essential complexities of
the modules were within reasonable limits with the exception of the
flex generated parser whose complexity is not controllable (see attached
complexity report).  The software also ran cleanly under codecenter with
out problems.

   I think the lex based parser is being under utilized by just counting
lines of code.  Given the type of information that should be available
it should be fairly easy to support generation of Halstead metrics.  Other
metrics that might be generated include counts of globals (declared and accessed), nesting depth (within a function), fan out (fan in would require retaining
information between runs).  
METRICS FOR PROGRAM Csize

Mod # MODULE				v(G) ev(G) iv(G) pv(G) #Lines Line #
----- ------				---- ----- ----- ----- ------ ------
    9 print_results			 1	1	1	   1	 11	25
    8 process_file			 5	1	5	   1	 23	38
    1 main				13	5	8	   1	 77	63
   14 yylex				135    12     122	   1	251    177
   35 scan:yy_get_next_buffer		16	1	8	   1	118    358
   26 scan:yy_get_previous_state	 7	1	1	   1	 31    483
   27 scan:yy_try_NUL_trans		 5	1	1	   1	 24    525
   33 scan:yyunput			 6	1	2	   1	 41    554
   30 scan:input			 7	4	5	   1	 64    603
   43 yyrestart				 2	1	2	   1	 10    672
    6 yy_switch_to_buffer		 3	1	2	   1	 25    687
   46 yy_load_buffer_state		 1	1	1	   1	  8    717
   45 yy_create_buffer			 3	1	3	   1	 26    730
    5 yy_delete_buffer			 2	1	1	   1	 10    761
   49 yy_init_buffer			 2	1	2	   1	 29    776
    3 scan:yy_push_state		 4	1	4	   1	 27    810
    2 scan:yy_pop_state			 2	1	2	   1	  8    842
    4 scan:yy_top_state			 1	1	1	   1	  5    855
   48 scan:yy_fatal_error		 1	1	1	   1	  7    865
   47 scan:yy_flex_alloc		 1	1	1	   1	  6    911
   40 scan:yy_flex_realloc		 1	1	1	   1	  7    921
   10 scan:yy_flex_free			 1	1	1	   1	  6    932
   13 init_scanner			 1	1	1	   1	 27    227
   29 scan:count_nb_nc_lines		 2	1	1	   1	  7    265
   17 scan:count			 2	1	2	   1	  7    283
   19 scan:semicolon			 1	1	1	   1	  4    301
   21 scan:pp_dir			15	8	7	   1	 47    336
   20 scan:string_lit			16	8	7	   1	 50    412
   23 scan:count_ws			 4	1	2	   1	 12    472
   24 scan:whitespace_line		 2	1	2	   1	  5    497
   31 scan:newline			 7	5	3	   1	 10    522
   34 scan:count_line_w_comment		 2	1	1	   1	  7    541
   22 scan:comment			19     15      11	   1	 44    575
   18 scan:check_type			 1	1	1	   1	  4    637
   32 scan:scan_error			 2	1	2	   1	  9    650
   25 scan:bad_char			 8	6	4	   1	 12    668
   36 yywrap				 1	1	1	   1	  4    692
-----                                 ---- ----- ----- ----- ------
	sum				302    92   221	  37   1063

PROGRAM DESIGN COMPLEXITY FOR PROGRAM Csize
ROOT MODULE OF PROGRAM:			   main
DESIGN COMPLEXITY S0:			   210
TESTED DESIGN COMPLEXITY:		   129
INTEGRATION COMPLEXITY S1 (# OF SUBTREES): 180
TESTED INTEGRATION COMPLEXITY:		   101

Testing Summary

Program : Csize                                                        08/16/94


Root main		 (    1),   101 out of	 180 design subtrees tested.
Root scan:yy_pop_state	 (    2),	0 out of	   2 design subtrees tested.
Root scan:yy_push_state	 (    3),	1 out of	   4 design subtrees tested.
Root scan:yy_top_state	 (    4),	0 out of	   1 design subtrees tested.
Root yy_delete_buffer	 (    5),	0 out of	   1 design subtrees tested.
Root yy_switch_to_buffer (    6),	1 out of	   2 design subtrees tested.


The following modules have not been executed:
	6 yy_switch_to_buffer		(    3 paths untested ).
	5 yy_delete_buffer		(    2 paths untested ).
	3 scan:yy_push_state		(    4 paths untested ).
	2 scan:yy_pop_state		(    2 paths untested ).
	4 scan:yy_top_state		(    1 path  untested ).
	48 scan:yy_fatal_error		(    1 path  untested ).
	40 scan:yy_flex_realloc		(    1 path  untested ).
	10 scan:yy_flex_free		(    1 path  untested ).

The following modules have been partially tested:
	8 process_file			(    4 of    5 paths tested ).
	1 main				(   11 of   13 paths tested ).
	14 yylex			(   64 of  135 paths tested ).
	35 scan:yy_get_next_buffer	(    4 of   16 paths tested ).
	26 scan:yy_get_previous_state	(    2 of    7 paths tested ).
	27 scan:yy_try_NUL_trans	(    1 of    5 paths tested ).
	33 scan:yyunput			(    1 of    6 paths tested ).
	30 scan:input			(    2 of    7 paths tested ).
	45 yy_create_buffer		(    1 of    3 paths tested ).
	21 scan:pp_dir			(    7 of   15 paths tested ).
	20 scan:string_lit		(    9 of   16 paths tested ).
	31 scan:newline			(    3 of    7 paths tested ).
	22 scan:comment			(    8 of   19 paths tested ).
	25 scan:bad_char		(    2 of    8 paths tested ).

The following modules have full path coverage:
	9 print_results			(    1 path  tested ).
	43 yyrestart			(    2 paths tested ).
	46 yy_load_buffer_state		(    1 path  tested ).
	49 yy_init_buffer		(    2 paths tested ).
	47 scan:yy_flex_alloc		(    1 path  tested ).
	13 init_scanner			(    1 path  tested ).
	29 scan:count_nb_nc_lines	(    2 paths tested ).
	17 scan:count			(    2 paths tested ).
	19 scan:semicolon		(    1 path  tested ).
	23 scan:count_ws		(    4 paths tested ).
	24 scan:whitespace_line		(    2 paths tested ).
	34 scan:count_line_w_comment	(    2 paths tested ).
	18 scan:check_type		(    1 path  tested ).
	32 scan:scan_error		(    2 paths tested ).
	36 yywrap			(    1 path  tested ).


By: Paul Hoefling <hoefling@mdd.comm.mot.com>


In general, csize works as advertised.  I submitted one report about
what I consider a bug, and the author disagrees.  I could really argue
the issue on either side, so I'll say go ahead and post it.

By: shioya@sranx2.sra.co.jp (Kazunori Shioya)

Dear Moderator,


I have ported csize on NeXT (motorola) OS3.0J, SONY NEWS-OS Release 4.2R #0,
and Toshiba SPARC-LT with SunOS Release 4.1.1-JLE1.1.1 OS/AS=V4.11 (GENERIC)  
#3.

On NeXT/OS3.0J, cc is gcc. However, I have modified csize.c as follows;

	#include <stdio.h>
	/*
	#include <unistd.h>	-- no such include file on NS3.0J
	*/
	#include <sys/types.h>

	#include "csize.h"
	#include "patchlevel.h"
	
	%NeXT%  make
	flex  scan.l
	mv  lex.yy.c scan.c
	cc -O  -c scan.c
	cc -O  -c csize.c
	cc -O  scan.o csize.o -o csize

	%NeXT% make test
	Running tests in subdirectory test-dir

	Regression suite for csize, Revision: 1.9


	Running regression test for output (silently).
	This should be quick.
	TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1

	Differences from expected: (no news is good news)
	diff  ./TEST-OUTPUT.out TEST-OUTPUT.ok
	381c381
	< ../csize: illegal option -- u
	---
	> csize: illegal option -- u
	*** Exit 1


	Running regression test for counts (silently).
	Please be patient, this could take a few minutes.
	TEST-COUNTS.sh > ./TEST-COUNTS.out 2>&1

	Differences from expected: (no news is good news)
	diff  ./TEST-COUNTS.out TEST-COUNTS.ok
	`all' not remade because of errors

	%NeXT%

No modification was needed on SunOS 4.1.1-JLE1.1.1.
However, regression test failed on Sun.

	%Sun%  make
	rm -f scan.c
	flex  -t scan.l > scan.c
	gcc -O   -target sun4 -c  scan.c
	gcc -O   -target sun4 -c  csize.c
	gcc -O  scan.o csize.o -o csize
	
	%Sun%  make test
	Running tests in subdirectory test-dir
	
	Regression suite for csize, Revision: 1.9
	
	
	Running regression test for output (silently).
	This should be quick.
	./TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1
	
	Differences from expected: (no news is good news)
	diff  ./TEST-OUTPUT.out ./TEST-OUTPUT.ok
	
	Running regression test for counts (silently).
	Please be patient, this could take a few minutes.
	./TEST-COUNTS.sh > ./TEST-COUNTS.out 2>&1
	
	Differences from expected: (no news is good news)
	diff  ./TEST-COUNTS.out ./TEST-COUNTS.ok
	144,146c144,146
	< Matched comments:   7 = 7
	< Matched nonblank noncomment lines:   1 = 1
	< *** Mismatch in count of semicolons ; 1 != 2
	---
	> *** Mismatch in count of comments ; 7 != 6
	> *** Mismatch in count of nonblank noncomment lines ; 1 != 0
	> Matched semicolons:   1 = 1
	*** Error code 1
	make: Warning: Target `all' not remade because of errors
	Current working directory /mnt5/mgr/shioya/csize/test-dir
	%Sun% 

	

Also, no modification was needed on NEWS-OS 4.2R.
However, regression test failed but proceeded by modification.
	
	%NEWS% make
	flex  scan.l
	mv lex.yy.c scan.c
	gcc -O  -c scan.c
	gcc -O  -c csize.c
	gcc -O  scan.o csize.o -o csize
	%NEWS% make test
	Running tests in subdirectory test-dir
	sh: -k: not found
	*** Exit 1
	
	Stop.

	%NEWS% cd test-dir
	%NEWS% make
	
	Regression suite for csize, Revision: 1.9
	
	
	Running regression test for output (silently).
	This should be quick.
	./TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1
	
	Differences from expected: (no news is good news)
	diff  ./TEST-OUTPUT.out ./TEST-OUTPUT.ok
	381c381
	Regression suite for csize, Revision: 1.9
	
	
	Running regression test for output (silently).
	This should be quick.
	./TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1
	
	Differences from expected: (no news is good news)
	diff  ./TEST-OUTPUT.out ./TEST-OUTPUT.ok
	381c381
	< ../csize: illegal option -- u
	---
	> csize: illegal option -- u
	*** Exit 1
	
	Stop.
	
	%NEWS% mv TEST-OUTPUT.ok TEST-OUTPUT.ok.org
	%NEWS% cp TEST-OUTPUT.out TEST-OUTPUT.ok
	%NEWS% make
	'
	Regression suite for csize, Revision: 1.9
	
	
	Running regression test for output (silently).
	This should be quick.
	./TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1

	Differences from expected: (no news is good news)
	diff  ./TEST-OUTPUT.out ./TEST-OUTPUT.ok
	
	Running regression test for counts (silently).
	Please be patient, this could take a few minutes.
	./TEST-COUNTS.sh > ./TEST-COUNTS.out 2>&1
	
	Differences from expected: (no news is good news)
	diff  ./TEST-COUNTS.out ./TEST-COUNTS.ok
	%NEWS%

I have installed flex version 2.4.6 and used on three machines.

---
Kazunori Shioya @ System Technologies Group/SRA, Inc.(ex.3134)


By: "T.E.Dickey" <dickey@clark.net>

I tried out csize on Linux (0.00.15), and followed the conversation well enough
about the various bugs, but don't have much to add in that line.  Like some of
the other reviewers, I'd written a line counter (that's not ready for posting
since it's part of a much larger system).  I did think that the lex-based
approach was unnecessarily complex, since the author doesn't really exploit the
information that he gets from the scanner.  (Mine is _much_ smaller, and gets a
lot more information, without being lex-based).

Anyway, csize works, and (because there aren't a lot of programs that are
visible that it must compete with, it's ok for posting.  I'm inclined to
encourage more ambitious programs, such as the ASAP (ada metrics) program that
I saw a couple of years ago.  _That_ really exploits lexical analysis.

-- 
Thomas E. Dickey
dickey@clark.net

By: franklin@chdasic.sps.mot.com (Malcolm L. Franklin)

Dave:

csize results correlate with an in-house sizing tool.  It handles ANSI/ISO
9899-1990 code, as well as traditional K&R:  I tested it against new projects
developed in ANSI C, legacy systems in K&R and mixed K&R/ANSI, and against 
the "clients" source code tre for X11R5 patch level 25.

It seems to be robust and accurate; I recommend that the csize package
be accepted.  I have no issue with the "feature" of counting source split
across several lines via escaped newline characters, as a single line of 
source.

--Malcolm

--
--------------------------------------------------------------------------------
Malcolm L. Franklin                email:   Malcolm_Franklin@chdasic.sps.mot.com
Sr. Staff Engineer                 Phone:   (602) 491-7182
Motorola ASIC, Design Automation

By: Anonymous

Review of csize
===============

Format
------

The csize package was supplied in three shar files.  They unpacked
correctly on one platform, but not on two others which were running
SysVr3 and SysVr2.2 (both with 14 character filenames).

As a result, the uuencoded tar file with the test directory, called
"test-dir.tar.Z.uu", was created as "test-dir.tar.Z".  When the
instructions to run "make test-dir" were followed, uudecode wrote on top
of the .uu file (as its output file name was the same as the actual name
of the uuencoded file).

I also noted that a number of the files in the test-dir directory had
names that exceeded 14 characters.  I abandoned testing on these two
machines at this point, as I had previously established that (as
predicted by the README) the native version of lex was unable to process
the "scan.l" file; the native compilers were unable to compile the
supplied "scan.c" file; and the current version of flex (which is now
flex-2.4.7, not flex-2.4.6) cannot be built on either of those machines
because of portability problems with flex.


Description and Purpose
-----------------------

The package came with a README.  I was disappointed to see a small
package like this one was written to require a Standard C compiler.
Many of the platforms that it would target don't yet have these
compilers installed and there is no reason to do so for such a small
piece of software.

The README did not really convince me of the "must have" nature of the
package, and this was also true of the manual (see below).  The actual
purpose that it serves was not really stated.

There is a "patchlevel.h" file that shows the revision level.


Building the Software
---------------------

The INSTALL file states that an "ANSI" compiler is required.  It makes
no statements about target platforms, but the contents of the file sound
as though it's targetted at Unix systems.  Why this should be so, I
don't know -- this is a general purpose application to analyse C source
files and so should be designed to work on any machine that has a C
compiler.

There is no discussion of the necessary steps for building on other
platforms than those the author used, and it certainly can't be built as
distributed on systems with 14 character file names -- I should imagine
there would be some problems with other (non-Unix) systems, such as
MS-DOS.

There is a Makefile with most of the usual features.  I didn't examine
it very thoroughly, but it behaved as I expected on my BSDI-1.1 system.
The build of the software appeared to run correctly, but there were
problems with the testing (see below).

Building, testing and installation are separate steps.  Since the tests
failed, I did not install it on any platform.

The specific platforms I tried to build it on were:

1. Motorola Delta - System Vr3
2. National Semiconductor ICM-3216 - System Vr2.2
3. PC-Clone 486DX-33 - BSDI BSD/386-1.1

For (1) and (2), which have 14 character file name limits and a native
lex that cannot handle the "scan.l" file and which cannot compile the
current release of flex, I could not build the package.

I built it on BSDI-1.1 using both the supplied lex (which is based on
flex-2.4.6) and the current flex-2.4.7.  I did not try the distributed
version of flex-2.4.6, because I had been involved in testing of another
package (tripwire-1.2) which had shown up some serious bugs in that
release of flex.  As a result, the author of flex provided patches to us
for tripwire and I used that in testing csize.  After a few days, he
released flex-2.4.7, so I used it too.


Testing the Software
--------------------

Did the software run on each of the systems you tested?

* No.  I only managed to build it under BSDI, but it failed its tests.
  Interestingly, it failed worse with the version created with the
  latest flex than using flex-2.4.6 (which is now obsolete).

* I include a script of the two "make" runs to both build and test the
  package -- the first compilation uses "LEX=lex" where the lex is the
  one based on flex-2.4.6, while the second compilation uses "LEX=flex"
  where the flex is flex-2.4.7.  Note that the output of "lex" is
  identical in all significant respects with the supplied "scan.c.flex"
  while the "scan.c" generated by flex-2.4.7 was quite a lot different.

Did the program perform the functions it was supposed to perform?

* It failed its tests in both forms.  Here is the script:

------------------------- compilation and test -------------------------
Script started on Tue Aug  9 18:04:12 1994
$ uname -a
BSD/386 maxim.gba.oz.au 1.1 0 i386
$ make LEX=lex test
lex  scan.l
mv lex.yy.c scan.c
gcc -O  -c scan.c
gcc -O  -c csize.c
gcc -O  scan.o csize.o -o csize 
Running tests in subdirectory test-dir

Syntax error: Unterminated quoted string
*** Error code 2 (continuing)

Running regression test for output (silently).
This should be quick.
./TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1

Differences from expected: (no news is good news)
diff  ./TEST-OUTPUT.out ./TEST-OUTPUT.ok

Running regression test for counts (silently).
Please be patient, this could take a few minutes.
./TEST-COUNTS.sh > ./TEST-COUNTS.out 2>&1

Differences from expected: (no news is good news)
diff  ./TEST-COUNTS.out ./TEST-COUNTS.ok
`all' not remade because of errors.
$ make clean
rm -f scan.c *.o
cd test-dir; make clean
rm -f ./TEST-OUTPUT.out ./TEST-COUNTS.out
$ make LEX=flex test
flex  scan.l
mv lex.yy.c scan.c
gcc -O  -c scan.c
gcc -O  -c csize.c
gcc -O  scan.o csize.o -o csize 
Running tests in subdirectory test-dir

Syntax error: Unterminated quoted string
*** Error code 2 (continuing)

Running regression test for output (silently).
This should be quick.
./TEST-OUTPUT.sh > ./TEST-OUTPUT.out 2>&1

Differences from expected: (no news is good news)
diff  ./TEST-OUTPUT.out ./TEST-OUTPUT.ok
278a279
> "z05-pp-eof.c", line 5: bad character
281a283
> "z06-com-eof.c", line 7: bad character
291a294
> "z09-str-eof.c", line 4: bad character
*** Error code 1 (continuing)

Running regression test for counts (silently).
Please be patient, this could take a few minutes.
./TEST-COUNTS.sh > ./TEST-COUNTS.out 2>&1

Differences from expected: (no news is good news)
diff  ./TEST-COUNTS.out ./TEST-COUNTS.ok
`all' not remade because of errors.
$ 

Script done on Tue Aug  9 18:08:59 1994
---------------------------------- end ---------------------------------


The Documentation
-----------------

There is a standard man page, but I did not spend much time on it since
the software does not work on my systems.


Functionality and Features
--------------------------

Does the software perform some function that is valuable?

* This is probably a religious question.  While I sometimes want to know
  how "big" something is, I can't see much this gives me that "wc" does
  not also tell me.  If it did some analysis of the complexity, then it
  might add something significant to one's knowledge, but I'm not
  convinced that it's much more than a line counter.  Certainly, the
  documentation does not seem to take this thorny issue seriously.  I
  would think the concept would need to be sold a bit more thoroughly.

Are there obvious features or additions that would improve the package?

* Well, give it the complexity of gcc, and then add a bit of AI, and who
  knows what we might learn :-)


Overall Evaluation
------------------

What is your overall evaluation -- would you recommend it to a friend?

* No.

Would you suggest that this submission:

   - be accepted for posting as is
   - be accepted after minor revisions (that you have detailed)
   - be returned to the author with a recommendation to make
     major changes and re-submit
   - be rejected

* I'm inclined to suggest that it be returned with a recommendation for
  the following major changes:

    - Remove the requirement for Standard C in the usual way.
    - Fix the filenames so they are useable across a wider variety of
      platforms (at least all Unix variants).
    - Solve the lex problems so that it at least works with the latest
      version of flex (or get Vern Paxson to fix flex, if that's the
      problem).
    - Write a rationale for the program that shows why people might want
      to use it in preference to wc.
exit 0 # Just in case...

