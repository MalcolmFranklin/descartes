#!/bin/sh
#From lott@informatik.uni-kl.de (Christopher Lott)
#Newsgroups: comp.sources.reviewed
#Subject: REPOST: v04i003:  csize - csize-part2of4, Part02/04
#Date: 17 Oct 1994 16:30:39 -0500
#
#Submitted-by: lott@informatik.uni-kl.de (Christopher Lott)
#Posting-number: Volume 4, Issue 3
#Archive-name: csize/part02
#Environment: ANSI C,FLEX
#
#
# This is part 02 of csize
# ============= scan.l ==============
if test -f 'scan.l' -a X"$1" != X"-c"; then
	echo 'x - skipping scan.l (File already exists)'
else
echo 'x - extracting scan.l (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'scan.l' &&
X
XD			[0-9]
XL			[a-zA-Z_]
XH			[a-fA-F0-9]
XE			[Ee][+-]?{D}+
XFS			(f|F|l|L)
XIS			(u|U|l|L)*
Xws			[ \t\v\f]
Xnl			[\n]
X
X%{
X
X/* $Id: scan.l,v 1.12 1994/10/11 15:45:22 lott Exp lott $
X *
X * csize, a program to measure the size of C source files.
X * Copyright (C) 1994 Christopher Lott <lott@informatik.uni-kl.de>
X * FB Informatik - Bau 57 / Universitaet KL / D--67653 Kaiserslautern / Germany
X *
X * This program is free software; you can redistribute it and/or modify
X * it under the terms of the GNU General Public License as published by
X * the Free Software Foundation.  See the file COPYING for more details.
X *
X * This file holds the source used by flex to generate the scanner for C.
X * SEE THE FILE "INSTALL" FOR THE REQUIRED FLEX VERSION.  Sorry to
X * shout, but different versions of flex exhibit different behavior.  
X *
X * Why flex?  Because lex complains about this file as follows:
X *     "scan.l", line xxx: (Error) Too many right contexts
X * If you simply remove the first token ("auto"), then lex dumps core
X * on my machine.  Neither behavior is acceptable and I refuse to code
X * around bugs in lex when flex is available, reliable, and free.
X *
X */
X
X#include <stdio.h>
X#include <scan.h>
X#include <csize.h>
X
X/* variables supplied by flex
X *
X */
X
Xextern int yyleng;
Xextern char *yytext;
Xextern FILE *yyin;
X
X/* global variables
X * variables beginning with C_ are referenced in main and
X * Echo is set in main; all appear in csize.h
X *
X */
X
Xint  Echo, 
X     Lex_errors;
X
Xlong C_newlines,           /* incremented at the *end* of a line */
X     C_blank_lines,
X     C_lines_w_comments,   
X     C_nb_nc_lines,        /* incremented when first nbnc is seen */
X     C_semicolons,
X     C_pp_directives;
X
X/*
X * variables used only in this file
X */
X
Xstatic char *Filename;
Xstatic int Column;
Xstatic long prev_line_with_text;
Xstatic long prev_line_with_comment;
X
X/*
X * functions defined and used only in this file
X */
X
Xstatic int check_type _((void));
Xstatic void count_nb_nc_lines _((void));
Xstatic void count _((void));
Xstatic void semicolon _((void));
Xstatic void string_lit _((void));
Xstatic void count_line_w_comment _((void));
Xstatic void comment _((int));
Xstatic void pp_dir _((void));
Xstatic void count_ws _((void));
Xstatic void whitespace_line _((void));
Xstatic void newline _((void));
Xstatic void scan_error _((char *));
Xstatic void bad_char _((void));
X
X%}
X
X%%
X
X"auto"			{ count(); return(AUTO);     }
X"break"			{ count(); return(BREAK);    }
X"case"			{ count(); return(CASE);     }
X"char"			{ count(); return(CHAR);     }
X"const"			{ count(); return(CONST);    }
X"continue"		{ count(); return(CONTINUE); }
X"default"		{ count(); return(DEFAULT);  }
X"do"			{ count(); return(DO);       }
X"double"		{ count(); return(DOUBLE);   }
X"else"			{ count(); return(ELSE);     }
X"enum"			{ count(); return(ENUM);     }
X"extern"		{ count(); return(EXTERN);   }
X"float"			{ count(); return(FLOAT);    }
X"for"			{ count(); return(FOR);      }
X"goto"			{ count(); return(GOTO);     }
X"if"			{ count(); return(IF);       }
X"int"			{ count(); return(INT);      }
X"long"			{ count(); return(LONG);     }
X"register"		{ count(); return(REGISTER); }
X"return"		{ count(); return(RETURN);   }
X"short"			{ count(); return(SHORT);    }
X"signed"		{ count(); return(SIGNED);   }
X"sizeof"		{ count(); return(SIZEOF);   }
X"static"		{ count(); return(STATIC);   }
X"struct"		{ count(); return(STRUCT);   }
X"switch"		{ count(); return(SWITCH);   }
X"typedef"		{ count(); return(TYPEDEF);  }
X"union"			{ count(); return(UNION);    }
X"unsigned"		{ count(); return(UNSIGNED); }
X"void"			{ count(); return(VOID);     }
X"volatile"		{ count(); return(VOLATILE); }
X"while"			{ count(); return(WHILE);    }
X
X{L}({L}|{D})*		{ count(); return(check_type()); }
X
X0[xX]{H}+{IS}?		{ count(); return(CONSTANT); }
X0{D}+{IS}?		{ count(); return(CONSTANT); }
X{D}+{IS}?		{ count(); return(CONSTANT); }
X'(\\.|[^\\'\n])+'	{ count(); return(CONSTANT); }
X
X{D}+{E}{FS}?		{ count(); return(CONSTANT); }
X{D}*"."{D}+({E})?{FS}?	{ count(); return(CONSTANT); }
X{D}+"."{D}*({E})?{FS}?	{ count(); return(CONSTANT); }
X
X">>="			{ count(); return(RIGHT_ASSIGN); }
X"<<="			{ count(); return(LEFT_ASSIGN); }
X"+="			{ count(); return(ADD_ASSIGN); }
X"-="			{ count(); return(SUB_ASSIGN); }
X"*="			{ count(); return(MUL_ASSIGN); }
X"/="			{ count(); return(DIV_ASSIGN); }
X"%="			{ count(); return(MOD_ASSIGN); }
X"&="			{ count(); return(AND_ASSIGN); }
X"^="			{ count(); return(XOR_ASSIGN); }
X"|="			{ count(); return(OR_ASSIGN); }
X">>"			{ count(); return(RIGHT_OP); }
X"<<"			{ count(); return(LEFT_OP); }
X"++"			{ count(); return(INC_OP); }
X"--"			{ count(); return(DEC_OP); }
X"->"			{ count(); return(PTR_OP); }
X"&&"			{ count(); return(AND_OP); }
X"||"			{ count(); return(OR_OP); }
X"<="			{ count(); return(LE_OP); }
X">="			{ count(); return(GE_OP); }
X"=="			{ count(); return(EQ_OP); }
X"!="			{ count(); return(NE_OP); }
X";"			{ count(); semicolon(); return(';'); }
X"{"			{ count(); return('{'); }
X"}"			{ count(); return('}'); }
X","			{ count(); return(','); }
X":"			{ count(); return(':'); }
X"="			{ count(); return('='); }
X"("			{ count(); return('('); }
X")"			{ count(); return(')'); }
X"["			{ count(); return('['); }
X"]"			{ count(); return(']'); }
X"."			{ count(); return('.'); }
X"&"			{ count(); return('&'); }
X"!"			{ count(); return('!'); }
X"~"			{ count(); return('~'); }
X"-"			{ count(); return('-'); }
X"+"			{ count(); return('+'); }
X"*"			{ count(); return('*'); }
X"/"			{ count(); return('/'); }
X"%"			{ count(); return('%'); }
X"<"			{ count(); return('<'); }
X">"			{ count(); return('>'); }
X"^"			{ count(); return('^'); }
X"|"			{ count(); return('|'); }
X"?"			{ count(); return('?'); }
X
X\"			{ count(); string_lit(); return(STRING_LITERAL); }
X
X"#"{ws}*"define"	{ count(); pp_dir(); /* from K&R 2/e p. 239 */ }
X"#"{ws}*"undef"		{ count(); pp_dir(); }
X"#"{ws}*"include"	{ count(); pp_dir(); }
X"#"{ws}*"line"		{ count(); pp_dir(); }
X"#"{ws}*"error"		{ count(); pp_dir(); }
X"#"{ws}*"pragma"	{ count(); pp_dir(); }
X
X"#"{ws}*"endif"		{ count(); pp_dir(); }
X"#"{ws}*"if"		{ count(); pp_dir(); }
X"#"{ws}*"ifdef"		{ count(); pp_dir(); }
X"#"{ws}*"ifndef"	{ count(); pp_dir(); }
X"#"{ws}*"elif"		{ count(); pp_dir(); }
X"#"{ws}*"else"		{ count(); pp_dir(); }
X
X"#"{ws}*"include_next"	{ count(); pp_dir(); /* from GCC's cccp.c */ }
X"#"{ws}*"import"	{ count(); pp_dir(); }
X"#"{ws}*"warning"	{ count(); pp_dir(); }
X"#"{ws}*"sccs"		{ count(); pp_dir(); }
X"#"{ws}*"ident"		{ count(); pp_dir(); }
X"#"{ws}*"assert"	{ count(); pp_dir(); }
X"#"{ws}*"unassert"	{ count(); pp_dir(); }
X
X"\\"			{ count(); /* backslash processing is weak */ }
X
X"/*"			{ comment(1); }
X{ws}+			{ count_ws(); }
X^{ws}+$			{ whitespace_line(); }
X{nl}			{ newline(); }
X.			{ bad_char(); }
X
X%%
X
X
X/* init_scanner
X * initialize necessary variables and set up the input file pointer
X * before processing a file.
X *
X * Called from csize.c
X *
X */
X
Xvoid
Xinit_scanner(FILE *fp, char *filename) 
X{
X  C_newlines    = 0;
X  C_blank_lines = 0;
X  C_lines_w_comments = 0;
X  C_nb_nc_lines = 0;
X  C_semicolons = 0;
X  C_pp_directives = 0;
X
X  Lex_errors = 0;
X  prev_line_with_comment = -1;
X  prev_line_with_text    = -1;
X
X  Filename = filename;
X
X  /* although the flex documentation states that assigning
X   * to yyin like this:
X   *         yyin = fp;
X   * should be equivalent to 
X   *         yyrestart(fp);
X   * the run-time behavior of scanners generated with flex 2.4.6
X   * is different; with only the assignment, the scanner complains
X   * of an illegal characater at line 1, character 1 of subsequent
X   * files.  So this is a workaround.
X   */
X  yyrestart(fp); 
X}
X
X
X/* count_nb_nc_lines
X * count nonblank noncomment lines in the input, but
X * ensure that we don't count the same line twice by
X * checking and/or updating the appropriate variable
X *
X * called by functions; no dependence on yytext
X *
X */
X
Xstatic void
Xcount_nb_nc_lines(void)
X{
X  if (C_newlines != prev_line_with_text) {
X    ++C_nb_nc_lines;
X    prev_line_with_text = C_newlines;
X  }
X}
X
X
X/* count
X * count columns for lines with *nonblank noncomment* text.
X * Optionally echo the buffer yytext, and call count_nb_nc_lines  
X * to count the line.
X *
X * called by lexer with the *nonblank noncomment* token in yytext
X *
X */
X
Xstatic void
Xcount(void)
X{
X  Column += yyleng;
X  if (Echo) 
X    ECHO;
X  count_nb_nc_lines();
X}
X
X
X/* semicolon
X * saw a semicolon in the input, just bump the appropriate counter
X * 
X * count() is called before this function
X *
X * called by lexer but has no dependence on yytext
X *
X */
X
Xstatic void
Xsemicolon(void)
X{
X  ++C_semicolons;
X}
X
X
X/* pp_dir
X * Read characters until the terminating newline ('\n') is found.  Count the
X * number of directives.  Even though no text may appear after a directive 
X * on a line, count columns so that the function newline() can be used.
X *
X * Complications:
X *     Escaped backslash characters ('\\').  These do nothing.
X *     Escaped newline characters (continuation lines).  These force the
X *         function to update newline and nonblank noncomment line counts.  
X *         Note that a continuation line can consist of a single newline,
X *         or only whitespace and a newline; in both cases the continuation
X *         line terminates the preprocessor directive.  The algorithm makes 
X *         provisions to treat both cases identically.  Those blank-ish 
X *         continuation lines, although they look blank, are counted as 
X *         nonblank noncomment lines.
X *     Comments that begin on the pp_dir's line.  These must be processed
X *         until the closing * and / is found, after which processing of 
X *         the pp resumes.  See the part in K&Rrev2, p. 229, about 
X *         logically successive preprocessor phases.
X *     The terminating newline must be given back via unput so that
X *         the lexer can correctly identify the beginning of lines
X *         for rules that use the caret ('^')
X *
X * Input errors:
X *     EOF condition before the terminating newline
X * 
X * count() is called before this function, which marks the first line of
X *     the preprocessor directive as having nonblank noncomment text.  
X *
X * Called by the lexer, but no dependence on yytext
X *
X */
X
Xstatic void
Xpp_dir(void)
X{
X  char c;
X  int in_pp_dir = 1;
X  int saw_forwslash = 0;
X  int apply_backslash = 0;
X  
X  ++C_pp_directives;
X
X  while (in_pp_dir && (c = input()) != EOF) {
X
X    if (c == '\n') {             /* first take care of newline chars */
X      if (apply_backslash) {
X	apply_backslash = 0;
X	newline();               /* register the newline globally */
X	count_nb_nc_lines();     /* count the new nb nc line */
X      }
X      else {
X	if (Column == 0)         /* if Column has value 0, newline() will */
X	  ++Column;              /* count the line as blank; don't let it */
X	unput(c);                /* give back the nl */
X	in_pp_dir = 0;           /* done with this pp dir */
X      }
X    }
X    else {
X
X      if (Echo)                  /* only do echo processing for non-newlines */
X	putchar(c);
X      ++Column;
X
X      switch (c) {
X      case '\\':
X	if (apply_backslash) {
X	  apply_backslash = 0;
X	}
X	else {
X	  apply_backslash = 1;
X	}
X	saw_forwslash = 0;
X	break;
X      case '/':
X	saw_forwslash = 1;
X	apply_backslash = 0;
X	break;
X      case '*':
X	if (saw_forwslash) {
X	  comment(0);             /* 0 means don't echo the start token again */
X	}
X	saw_forwslash = 0;
X	apply_backslash = 0;
X	break;
X      default:   
X	apply_backslash = 0;      /* any char after f/b-slash turns off the flags */
X	saw_forwslash = 0;
X	break;
X      }
X    }
X
X  } /* while */
X
X  if (c == EOF)
X    scan_error("EOF in preprocessor directive");
X}
X
X
X/* string_lit
X * Read characters until the closing quote ('"') is found.  Do not count
X * string literals. Count columns because a string literal may be followed 
X * by other text on a line. 
X *
X * Complications:
X *     Escaped backslash characters ('\\').  These do nothing.
X *     Escaped quote characters ('\"').  These do not terminate
X *         the string literal.
X *     Escaped newline characters (continuation lines).  These force the
X *         function to update newline and nonblank noncomment line counts.  
X *         Note that a continuation line can never be entirely blank - 
X *         either it has another escaped newline, or it has the terminating 
X *         quote.  This prevents the anomaly of counting a blank line as
X *         something else, as is the case for preprocessor directives.
X *
X * Input errors:
X *     unescaped newline before the terminating quote
X *     EOF condition     before the terminating quote
X * 
X * count() is called before this function, which marks the first line of
X *     the string literal line as having nonblank noncomment text.  
X *
X * Called by the lexer, but no dependence on yytext
X *
X */
X
Xstatic void
Xstring_lit(void)
X{
X  char c;
X  int in_string_lit = 1;
X  int apply_backslash = 0;       /* apply backslash to the next char seen */
X
X  while (in_string_lit && (c = input()) != EOF) {
X
X    if (c == '\n') {             /* first take care of newline chars */
X      if (apply_backslash) {
X	apply_backslash = 0;
X	newline();               /* register the newline globally */
X	count_nb_nc_lines();     /* count the new nb nc line */
X      }
X      else {
X	scan_error("newline in string literal");
X	unput(c);                /* give back the newline */
X	in_string_lit = 0;       /* give up on this string literal */
X      }
X    }
X    else {                       /* prev char was not a newline */
X      switch (c) {
X      case '\\':
X	if (apply_backslash) 
X	  apply_backslash = 0;
X	else
X	  apply_backslash = 1;
X	break;
X      case '"':
X	if (apply_backslash) 
X	  apply_backslash = 0;
X	else
X	  in_string_lit = 0;     /* finished with this string literal */
X	break;
X      default:   
X	if (apply_backslash)     /* any char after bslash turns off the flag */
X	  apply_backslash = 0;
X	break;
X      }
X
X      if (Echo)                  /* only do echo processing for non-newlines */
X	putchar(c);
X      ++Column;
X    }
X
X  } /* while */
X
X  if (c == EOF)
X    scan_error("EOF in string literal");
X}
X
X
X/* count_ws
X * count the columns in the buffer yytext (only white space, never nl)
X * adjusting for tabs 
X *
X * called by the lexer with the whitespace in yytext
X *
X */
X
Xstatic void
Xcount_ws(void)
X{
X  int i;
X  
X  if (Echo) 
X    ECHO;
X
X  for (i = 0; yytext[i] != '\0'; i++)
X    if (yytext[i] == '\t')
X      Column += 8 - (Column % 8);
X    else
X      Column++;
X}  
X
X
X/* whitespace_line
X * Process a line that is not empty but only has whitespace.
X * The newline is *not* part of yytext at this point.
X * Do not do *anything* except echo the line, if desired.
X * Because the Column variable is not changed, it will be
X * 0 when newline is called, which will count the blank line.
X *
X * called by the lexer with the whitespace in yytext
X *
X */
X
Xstatic void
Xwhitespace_line(void)
X{
X  if (Echo) 
X    ECHO;
X}
X
X
X/* newline
X * Count all newline characters.  Also check the value of the Column 
X * variable to catch lines with nothing but whitespace (blank lines).
X * 
X * Note that blank lines are somewhat difficult to catch with a lex 
X * pattern, because the pattern ``^"\n"'', meaning match a newline that 
X * occurs first on a line, doesn't seem to work.
X *
X * Note also that if the lex pattern to match a line with only whitespace
X * fires, then the Column variable will not be incremented, and this 
X * function will be called with Column = 0.  I call this a virtual 
X * column 0, because newline really didn't occur as the first character
X * on the line, we just pretend that it did.
X *
X * Called by the lexer *and* other functions; no dependence on yytext
X *
X */
X
Xstatic void
Xnewline(void)
X{
X  if (Echo) 
X    putchar('\n');
X  ++C_newlines;
X  if (Column == 0) {
X    ++C_blank_lines;
X  }
X  Column = 0;
X}
X
X
X/* count_line_w_comment
X * Cuarantee that we don't count a line as having a comment twice
X *
X * Called by functions; no dependence on yytext
X *
X */
X
Xstatic void
Xcount_line_w_comment(void)
X{
X  if (C_newlines != prev_line_with_comment) {
X    ++C_lines_w_comments;
X    prev_line_with_comment = C_newlines;
X  }
X}
X
X
X/* comment
X * Read characters until the closing two-character sequence '*' and '/'
X * is found.  Count the lines with comments.  Count columns because a 
X * comment may be followed by other text on a line.
X *
X * Complications:
X *     Newline characters.  These force the function to update the counts
X *         of newlines and the number of lines with comments.  A line
X *         within a comment that has zero or more whitespace characters 
X *         and a newline, although blank, will be counted as a comment line.
X * Input errors:
X *     EOF condition before the terminating token
X * 
X * This fn implements a simple FSA to recognize the end of a comment.
X * The original code was reused from Jeff Lee's distribution and
X * amended to count lines.  While I don't much like gotos, his 
X * implementation is highly concise and keeps code redundancy to a 
X * minimum.  This code is far more concise than, for example, the 
X * code from the flexdoc(1) man page, when you consider all the
X * intermediate cases in which characters must be counted.
X *
X * Called by the lexer with the comment start token in yytext,
X * and also called by pp_dir with garbage in yytext, so don't
X * depend on yytext (and don't use ECHO).  Argument tells whether
X * it should echo the comment start token.
X *
X */
X
Xstatic void
Xcomment(int echo_start)
X{
X  register int c, lookahead;
X
X  if (Echo && echo_start) { 
X    putchar('/');
X    putchar('*');
X  }
X  Column += yyleng;
X
X  /* starting a comment, count the line if necessary */
X  count_line_w_comment();
X  
X  /* deal with all characters in this while loop */
X loop:
X  while ((c = input()) != EOF) {    /* find a star */
X
X    if (c == '\n') {
X      if (Column == 0)      /* if Column has value 0, newline() will count */
X	++Column;           /* the line as blank, which we don't want */
X      newline();
X      count_line_w_comment();
X    }
X    else {
X      if (Echo) 
X	putchar(c);
X      ++Column;
X    }
X
X    if (c == '*')                   /* found one, leave the while loop */
X      break;
X  }
X
X  if (c != EOF && (lookahead = input()) != '/') {    /* check for a slash */
X    unput(lookahead);
X    goto loop;
X  }
X
X  if (c == EOF) {
X    scan_error("EOF in comment");
X  }
X  else {
X    if (Echo) 
X      putchar('/');
X  }
X}
X
X
X/* check_type
X * pseudo code --- this is what it should check
X *
X *	if (yytext == type_name)
X *		return(TYPE_NAME);
X *	else
X *		return(IDENTIFIER);
X *
X * If it did, it would be easy to build a C language
X * recognizer, and then trivial to count declarations
X * and executable statements.
X *
X * However, the function only returns IDENTIFIER
X *
X */
X
Xstatic int
Xcheck_type(void)
X{
X  return(IDENTIFIER);
X}
X
X
X/* scan_error
X * print an informative error message with file, line info.
X * if echoing is on, indicate the column where the error
X * was found by using the Column variable
X *
X */
X
Xstatic void
Xscan_error(char *s)
X{
X  fflush(stdout);
X  ++Lex_errors;
X  if (Echo)
X    printf("\n%*s\n%*s\n", Column, "^", Column, s);
X  else
X    printf("\"%s\", line %d: %s\n", Filename, C_newlines + 1, s);
X}
X
X
X/* bad_char
X * bump up the column count and call the error function
X *
X * Called by the lexer with the unrecognized character in yytext
X *
X */
X
Xstatic void
Xbad_char(void)
X{
X  int i;
X
X  if (Echo)
X    ECHO;
X  ++Column;
X  scan_error("bad character");
X  if (Echo) /* restore output to column where we left off */
X    for (i = 0; i < Column; ++i)
X      putchar(' ');
X}
X
X
X/* yywrap
X * supply a trivial version of yywrap
X * to eliminate the need to link against libfl
X * the value 1 means stop at the end of the file
X * (the file pointer has not been aimed at a new file)
X *
X * Called by the lexer at the end of the input
X *
X */
X
Xint
Xyywrap(void)
X{
X  return 1;
X}
SHAR_EOF
chmod 0644 scan.l ||
echo 'restore of scan.l failed'
Wc_c="`wc -c < 'scan.l'`"
test 19720 -eq "$Wc_c" ||
	echo 'scan.l: original size 19720, current size' "$Wc_c"
fi
# ============= patchlevel.h ==============
if test -f 'patchlevel.h' -a X"$1" != X"-c"; then
	echo 'x - skipping patchlevel.h (File already exists)'
else
echo 'x - extracting patchlevel.h (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'patchlevel.h' &&
X
X#ifndef PATCHLEVELDOTH
X
X#define PATCHLEVELDOTH
X
X/*
X * $Id: patchlevel.h,v 1.12 1994/10/11 15:45:22 lott Exp lott $
X *
X * csize, a program to measure the size of C source files.
X * Copyright (C) 1994 Christopher Lott <lott@informatik.uni-kl.de>
X * FB Informatik - Bau 57 / Universitaet KL / D--67653 Kaiserslautern / Germany
X *
X */
X
X#define CSIZE_VERSION "$Revision: 1.12 $"
X
X#endif
SHAR_EOF
chmod 0644 patchlevel.h ||
echo 'restore of patchlevel.h failed'
Wc_c="`wc -c < 'patchlevel.h'`"
test 383 -eq "$Wc_c" ||
	echo 'patchlevel.h: original size 383, current size' "$Wc_c"
fi
# ============= ansi2knr.c ==============
if test -f 'ansi2knr.c' -a X"$1" != X"-c"; then
	echo 'x - skipping ansi2knr.c (File already exists)'
else
echo 'x - extracting ansi2knr.c (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'ansi2knr.c' &&
X/* Copyright (C) 1989, 1991, 1993, 1994 Aladdin Enterprises. All rights reserved. */
X
X/* ansi2knr.c */
X/* Convert ANSI function declarations to K&R syntax */
X
X/*
Xansi2knr is distributed in the hope that it will be useful, but
XWITHOUT ANY WARRANTY.  No author or distributor accepts responsibility
Xto anyone for the consequences of using it or for whether it serves any
Xparticular purpose or works at all, unless he says so in writing.  Refer
Xto the GNU General Public License for full details.
X
XEveryone is granted permission to copy, modify and redistribute
Xansi2knr, but only under the conditions described in the GNU
XGeneral Public License.  A copy of this license is supposed to have been
Xgiven to you along with ansi2knr so you can know your rights and
Xresponsibilities.  It should be in a file named COPYING.  Among other
Xthings, the copyright notice and this notice must be preserved on all
Xcopies.
X*/
X
X/*
X * Usage:
X	ansi2knr input_file [output_file]
X * If no output_file is supplied, output goes to stdout.
X * There are no error messages.
X *
X * ansi2knr recognizes function definitions by seeing a non-keyword
X * identifier at the left margin, followed by a left parenthesis,
X * with a right parenthesis as the last character on the line.
X * It will recognize a multi-line header provided that the last character
X * of the last line of the header is a right parenthesis,
X * and no intervening line ends with a left brace or a semicolon.
X * These algorithms ignore whitespace and comments, except that
X * the function name must be the first thing on the line.
X * The following constructs will confuse it:
X *	- Any other construct that starts at the left margin and
X *	    follows the above syntax (such as a macro or function call).
X *	- Macros that tinker with the syntax of the function header.
X */
X
X/*
X * Change history:
X	lpd 89-xx-xx original version
X	lpd 94-07-16 added some conditionals to help GNU `configure',
X		suggested by Francois Pinard <pinard@iro.umontreal.ca>;
X		properly erase prototype args in function parameters,
X		contributed by Jim Avera <jima@netcom.com>;
X		correct error in writeblanks (it shouldn't erase EOLs)
X */
X
X/* Most of the conditionals here are to make ansi2knr work with */
X/* the GNU configure machinery. */
X
X#ifdef HAVE_CONFIG_H
X# ifdef CONFIG_BROKETS
X/*
X   We use <config.h> instead of "config.h" so that a compilation
X   using -I. -I$srcdir will use ./config.h rather than $srcdir/config.h
X   (which it would do because it found this file in $srcdir).
X */
X#  include <config.h>
X# else
X#  include "config.h"
X# endif
X#endif
X
X#include <stdio.h>
X#include <ctype.h>
X
X#ifdef HAVE_CONFIG_H
X
X/*
X   For properly autoconfiguring ansi2knr, use AC_CONFIG_HEADER(config.h).
X   This will define HAVE_CONFIG_H and so, activate the following lines.
X */
X
X# if STDC_HEADERS || HAVE_STRING_H
X#  include <string.h>
X# else
X#  include <strings.h>
X# endif
X
X#else /* not HAVE_CONFIG_H */
X
X/*
X   Without AC_CONFIG_HEADER, merely use <string.h> as in the original
X   Ghostscript distribution.  This loses on older BSD systems.
X */
X
X# include <string.h>
X
X#endif /* not HAVE_CONFIG_H */
X
X#ifdef STDC_HEADERS
X# include <stdlib.h>
X#else
X/*
X   malloc and free should be declared in stdlib.h,
X   but if you've got a K&R compiler, they probably aren't.
X */
Xchar *malloc();
Xvoid free();
X#endif
X
X/* Scanning macros */
X#define isidchar(ch) (isalnum(ch) || (ch) == '_')
X#define isidfirstchar(ch) (isalpha(ch) || (ch) == '_')
X
X/* Forward references */
Xchar *skipspace();
Xvoid writeblanks();
Xint test1();
Xint convert1();
X
X/* The main program */
Xint
Xmain(argc, argv)
X    int argc;
X    char *argv[];
X{	FILE *in, *out;
X#define bufsize 5000			/* arbitrary size */
X	char *buf;
X	char *line;
X	switch ( argc )
X	   {
X	default:
X		printf("Usage: ansi2knr input_file [output_file]\n");
X		exit(0);
X	case 2:
X		out = stdout; break;
X	case 3:
X		out = fopen(argv[2], "w");
X		if ( out == NULL )
X		   {	fprintf(stderr, "Cannot open %s\n", argv[2]);
X			exit(1);
X		   }
X	   }
X	in = fopen(argv[1], "r");
X	if ( in == NULL )
X	   {	fprintf(stderr, "Cannot open %s\n", argv[1]);
X		exit(1);
X	   }
X	fprintf(out, "#line 1 \"%s\"\n", argv[1]);
X	buf = malloc(bufsize);
X	line = buf;
X	while ( fgets(line, (unsigned)(buf + bufsize - line), in) != NULL )
X	   {	switch ( test1(buf) )
X		   {
X		case 2:			/* a function header */
X			convert1(buf, out, 1);
X			break;
X		case 1:			/* a function */
X			convert1(buf, out, 0);
X			break;
X		case -1:		/* maybe the start of a function */
X			line = buf + strlen(buf);
X			if ( line != buf + (bufsize - 1) ) /* overflow check */
X				continue;
X			/* falls through */
X		default:		/* not a function */
X			fputs(buf, out);
X			break;
X		   }
X		line = buf;
X	   }
X	if ( line != buf ) fputs(buf, out);
X	free(buf);
X	fclose(out);
X	fclose(in);
X	return 0;
X}
X
X/* Skip over space and comments, in either direction. */
Xchar *
Xskipspace(p, dir)
X    register char *p;
X    register int dir;			/* 1 for forward, -1 for backward */
X{	for ( ; ; )
X	   {	while ( isspace(*p) ) p += dir;
X		if ( !(*p == '/' && p[dir] == '*') ) break;
X		p += dir;  p += dir;
X		while ( !(*p == '*' && p[dir] == '/') )
X		   {	if ( *p == 0 ) return p;	/* multi-line comment?? */
X			p += dir;
X		   }
X		p += dir;  p += dir;
X	   }
X	return p;
X}
X
X/*
X * Write blanks over part of a string.
X * Don't overwrite end-of-line characters.
X */
Xvoid
Xwriteblanks(start, end)
X    char *start;
X    char *end;
X{	char *p;
X	for ( p = start; p < end; p++ )
X	  if ( *p != '\r' && *p != '\n' ) *p = ' ';
X}
X
X/*
X * Test whether the string in buf is a function definition.
X * The string may contain and/or end with a newline.
X * Return as follows:
X *	0 - definitely not a function definition;
X *	1 - definitely a function definition;
X *	2 - definitely a function prototype (NOT USED);
X *	-1 - may be the beginning of a function definition,
X *		append another line and look again.
X * The reason we don't attempt to convert function prototypes is that
X * Ghostscript's declaration-generating macros look too much like
X * prototypes, and confuse the algorithms.
X */
Xint
Xtest1(buf)
X    char *buf;
X{	register char *p = buf;
X	char *bend;
X	char *endfn;
X	int contin;
X	if ( !isidfirstchar(*p) )
X		return 0;		/* no name at left margin */
X	bend = skipspace(buf + strlen(buf) - 1, -1);
X	switch ( *bend )
X	   {
X	case ';': contin = 0 /*2*/; break;
X	case ')': contin = 1; break;
X	case '{': return 0;		/* not a function */
X	default: contin = -1;
X	   }
X	while ( isidchar(*p) ) p++;
X	endfn = p;
X	p = skipspace(p, 1);
X	if ( *p++ != '(' )
X		return 0;		/* not a function */
X	p = skipspace(p, 1);
X	if ( *p == ')' )
X		return 0;		/* no parameters */
X	/* Check that the apparent function name isn't a keyword. */
X	/* We only need to check for keywords that could be followed */
X	/* by a left parenthesis (which, unfortunately, is most of them). */
X	   {	static char *words[] =
X		   {	"asm", "auto", "case", "char", "const", "double",
X			"extern", "float", "for", "if", "int", "long",
X			"register", "return", "short", "signed", "sizeof",
X			"static", "switch", "typedef", "unsigned",
X			"void", "volatile", "while", 0
X		   };
X		char **key = words;
X		char *kp;
X		int len = endfn - buf;
X		while ( (kp = *key) != 0 )
X		   {	if ( strlen(kp) == len && !strncmp(kp, buf, len) )
X				return 0;	/* name is a keyword */
X			key++;
X		   }
X	   }
X	return contin;
X}
X
X/* Convert a recognized function definition or header to K&R syntax. */
Xint
Xconvert1(buf, out, header)
X    char *buf;
X    FILE *out;
X    int header;		/* Boolean */
X{	char *endfn;
X	register char *p;
X	char **breaks;
X	unsigned num_breaks = 2;	/* for testing */
X	char **btop;
X	char **bp;
X	char **ap;
X	/* Pre-ANSI implementations don't agree on whether strchr */
X	/* is called strchr or index, so we open-code it here. */
X	for ( endfn = buf; *(endfn++) != '('; ) ;
Xtop:	p = endfn;
X	breaks = (char **)malloc(sizeof(char *) * num_breaks * 2);
X	if ( breaks == 0 )
X	   {	/* Couldn't allocate break table, give up */
X		fprintf(stderr, "Unable to allocate break table!\n");
X		fputs(buf, out);
X		return -1;
X	   }
X	btop = breaks + num_breaks * 2 - 2;
X	bp = breaks;
X	/* Parse the argument list */
X	do
X	   {	int level = 0;
X		char *lp = NULL;
X		char *rp;
X		char *end = NULL;
X		if ( bp >= btop )
X		   {	/* Filled up break table. */
X			/* Allocate a bigger one and start over. */
X			free((char *)breaks);
X			num_breaks <<= 1;
X			goto top;
X		   }
X		*bp++ = p;
X		/* Find the end of the argument */
X		for ( ; end == NULL; p++ )
X		   {	switch(*p)
X			   {
X			case ',':
X				if ( !level ) end = p;
X				break;
X			case '(':
X				if ( !level ) lp = p;
X				level++;
X				break;
X			case ')':
X				if ( --level < 0 ) end = p;
X				else rp = p;
X				break;
X			case '/':
X				p = skipspace(p, 1) - 1;
X				break;
X			default:
X				;
X			   }
X		   }
X		/* Erase any embedded prototype parameters. */
X		if ( lp )
X		  writeblanks(lp + 1, rp);
X		p--;			/* back up over terminator */
X		/* Find the name being declared. */
X		/* This is complicated because of procedure and */
X		/* array modifiers. */
X		for ( ; ; )
X		   {	p = skipspace(p - 1, -1);
X			switch ( *p )
X			   {
X			case ']':	/* skip array dimension(s) */
X			case ')':	/* skip procedure args OR name */
X			   {	int level = 1;
X				while ( level )
X				 switch ( *--p )
X				   {
X				case ']': case ')': level++; break;
X				case '[': case '(': level--; break;
X				case '/': p = skipspace(p, -1) + 1; break;
X				default: ;
X				   }
X			   }
X				if ( *p == '(' && *skipspace(p + 1, 1) == '*' )
X				   {	/* We found the name being declared */
X					while ( !isidfirstchar(*p) )
X						p = skipspace(p, 1) + 1;
X					goto found;
X				   }
X				break;
X			default: goto found;
X			   }
X		   }
Xfound:		if ( *p == '.' && p[-1] == '.' && p[-2] == '.' )
X		   {	p++;
X			if ( bp == breaks + 1 )	/* sole argument */
X				writeblanks(breaks[0], p);
X			else
X				writeblanks(bp[-1] - 1, p);
X			bp--;
X		   }
X		else
X		   {	while ( isidchar(*p) ) p--;
X			*bp++ = p+1;
X		   }
X		p = end;
X	   }
X	while ( *p++ == ',' );
X	*bp = p;
X	/* Make a special check for 'void' arglist */
X	if ( bp == breaks+2 )
X	   {	p = skipspace(breaks[0], 1);
X		if ( !strncmp(p, "void", 4) )
X		   {	p = skipspace(p+4, 1);
X			if ( p == breaks[2] - 1 )
X			   {	bp = breaks;	/* yup, pretend arglist is empty */
X				writeblanks(breaks[0], p + 1);
X			   }
X		   }
X	   }
X	/* Put out the function name */
X	p = buf;
X	while ( p != endfn ) putc(*p, out), p++;
X	/* Put out the declaration */
X	if ( header )
X	  {	fputs(");", out);
X		for ( p = breaks[0]; *p; p++ )
X		  if ( *p == '\n' )
X		    putc('\n', out);
X	  }
X	else
X	  {	for ( ap = breaks+1; ap < bp; ap += 2 )
X		  {	p = *ap;
X			while ( isidchar(*p) )
X			  putc(*p, out), p++;
X			if ( ap < bp - 1 )
X			  fputs(", ", out);
X		  }
X		fputs(")  ", out);
X		/* Put out the argument declarations */
X		for ( ap = breaks+2; ap <= bp; ap += 2 )
X		  (*ap)[-1] = ';';
X		fputs(breaks[0], out);
X	  }
X	free((char *)breaks);
X	return 0;
X}
SHAR_EOF
chmod 0644 ansi2knr.c ||
echo 'restore of ansi2knr.c failed'
Wc_c="`wc -c < 'ansi2knr.c'`"
test 10770 -eq "$Wc_c" ||
	echo 'ansi2knr.c: original size 10770, current size' "$Wc_c"
fi
# ============= ansi2knr.1 ==============
if test -f 'ansi2knr.1' -a X"$1" != X"-c"; then
	echo 'x - skipping ansi2knr.1 (File already exists)'
else
echo 'x - extracting ansi2knr.1 (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'ansi2knr.1' &&
X.TH ANSI2KNR 1 "31 December 1990" 
X.SH NAME
Xansi2knr \- convert ANSI C to Kernighan & Ritchie C
X.SH SYNOPSIS
X.I ansi2knr
Xinput_file output_file
X.SH DESCRIPTION
XIf no output_file is supplied, output goes to stdout.
X.br
XThere are no error messages.
X.sp
X.I ansi2knr
Xrecognizes functions by seeing a non-keyword identifier at the left margin, followed by a left parenthesis, with a right parenthesis as the last character on the line.  It will recognize a multi-line header if the last character on each line but the last is a left parenthesis or comma.  These algorithms ignore whitespace and comments, except that the function name must be the first thing on the line.
X.sp
XThe following constructs will confuse it:
X.br
X     - Any other construct that starts at the left margin and follows the above syntax (such as a macro or function call).
X.br
X     - Macros that tinker with the syntax of the function header.
SHAR_EOF
chmod 0644 ansi2knr.1 ||
echo 'restore of ansi2knr.1 failed'
Wc_c="`wc -c < 'ansi2knr.1'`"
test 910 -eq "$Wc_c" ||
	echo 'ansi2knr.1: original size 910, current size' "$Wc_c"
fi
# ============= COPYING ==============
if test -f 'COPYING' -a X"$1" != X"-c"; then
	echo 'x - skipping COPYING (File already exists)'
else
echo 'x - extracting COPYING (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'COPYING' &&
X		    GNU GENERAL PUBLIC LICENSE
X		       Version 2, June 1991
X
X Copyright (C) 1989, 1991 Free Software Foundation, Inc.
X                          675 Mass Ave, Cambridge, MA 02139, USA
X Everyone is permitted to copy and distribute verbatim copies
X of this license document, but changing it is not allowed.
X
X			    Preamble
X
X  The licenses for most software are designed to take away your
Xfreedom to share and change it.  By contrast, the GNU General Public
XLicense is intended to guarantee your freedom to share and change free
Xsoftware--to make sure the software is free for all its users.  This
XGeneral Public License applies to most of the Free Software
XFoundation's software and to any other program whose authors commit to
Xusing it.  (Some other Free Software Foundation software is covered by
Xthe GNU Library General Public License instead.)  You can apply it to
Xyour programs, too.
X
X  When we speak of free software, we are referring to freedom, not
Xprice.  Our General Public Licenses are designed to make sure that you
Xhave the freedom to distribute copies of free software (and charge for
Xthis service if you wish), that you receive source code or can get it
Xif you want it, that you can change the software or use pieces of it
Xin new free programs; and that you know you can do these things.
X
X  To protect your rights, we need to make restrictions that forbid
Xanyone to deny you these rights or to ask you to surrender the rights.
XThese restrictions translate to certain responsibilities for you if you
Xdistribute copies of the software, or if you modify it.
X
X  For example, if you distribute copies of such a program, whether
Xgratis or for a fee, you must give the recipients all the rights that
Xyou have.  You must make sure that they, too, receive or can get the
Xsource code.  And you must show them these terms so they know their
Xrights.
X
X  We protect your rights with two steps: (1) copyright the software, and
X(2) offer you this license which gives you legal permission to copy,
Xdistribute and/or modify the software.
X
X  Also, for each author's protection and ours, we want to make certain
Xthat everyone understands that there is no warranty for this free
Xsoftware.  If the software is modified by someone else and passed on, we
Xwant its recipients to know that what they have is not the original, so
Xthat any problems introduced by others will not reflect on the original
Xauthors' reputations.
X
X  Finally, any free program is threatened constantly by software
Xpatents.  We wish to avoid the danger that redistributors of a free
Xprogram will individually obtain patent licenses, in effect making the
Xprogram proprietary.  To prevent this, we have made it clear that any
Xpatent must be licensed for everyone's free use or not licensed at all.
X
X  The precise terms and conditions for copying, distribution and
Xmodification follow.
X
X		    GNU GENERAL PUBLIC LICENSE
X   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
X
X  0. This License applies to any program or other work which contains
Xa notice placed by the copyright holder saying it may be distributed
Xunder the terms of this General Public License.  The "Program", below,
Xrefers to any such program or work, and a "work based on the Program"
Xmeans either the Program or any derivative work under copyright law:
Xthat is to say, a work containing the Program or a portion of it,
Xeither verbatim or with modifications and/or translated into another
Xlanguage.  (Hereinafter, translation is included without limitation in
Xthe term "modification".)  Each licensee is addressed as "you".
X
XActivities other than copying, distribution and modification are not
Xcovered by this License; they are outside its scope.  The act of
Xrunning the Program is not restricted, and the output from the Program
Xis covered only if its contents constitute a work based on the
XProgram (independent of having been made by running the Program).
XWhether that is true depends on what the Program does.
X
X  1. You may copy and distribute verbatim copies of the Program's
Xsource code as you receive it, in any medium, provided that you
Xconspicuously and appropriately publish on each copy an appropriate
Xcopyright notice and disclaimer of warranty; keep intact all the
Xnotices that refer to this License and to the absence of any warranty;
Xand give any other recipients of the Program a copy of this License
Xalong with the Program.
X
XYou may charge a fee for the physical act of transferring a copy, and
Xyou may at your option offer warranty protection in exchange for a fee.
X
X  2. You may modify your copy or copies of the Program or any portion
Xof it, thus forming a work based on the Program, and copy and
Xdistribute such modifications or work under the terms of Section 1
Xabove, provided that you also meet all of these conditions:
X
X    a) You must cause the modified files to carry prominent notices
X    stating that you changed the files and the date of any change.
X
X    b) You must cause any work that you distribute or publish, that in
X    whole or in part contains or is derived from the Program or any
X    part thereof, to be licensed as a whole at no charge to all third
X    parties under the terms of this License.
X
X    c) If the modified program normally reads commands interactively
X    when run, you must cause it, when started running for such
X    interactive use in the most ordinary way, to print or display an
X    announcement including an appropriate copyright notice and a
X    notice that there is no warranty (or else, saying that you provide
X    a warranty) and that users may redistribute the program under
X    these conditions, and telling the user how to view a copy of this
X    License.  (Exception: if the Program itself is interactive but
X    does not normally print such an announcement, your work based on
X    the Program is not required to print an announcement.)
X
XThese requirements apply to the modified work as a whole.  If
Xidentifiable sections of that work are not derived from the Program,
Xand can be reasonably considered independent and separate works in
Xthemselves, then this License, and its terms, do not apply to those
Xsections when you distribute them as separate works.  But when you
Xdistribute the same sections as part of a whole which is a work based
Xon the Program, the distribution of the whole must be on the terms of
Xthis License, whose permissions for other licensees extend to the
Xentire whole, and thus to each and every part regardless of who wrote it.
X
XThus, it is not the intent of this section to claim rights or contest
Xyour rights to work written entirely by you; rather, the intent is to
Xexercise the right to control the distribution of derivative or
Xcollective works based on the Program.
X
XIn addition, mere aggregation of another work not based on the Program
Xwith the Program (or with a work based on the Program) on a volume of
Xa storage or distribution medium does not bring the other work under
Xthe scope of this License.
X
X  3. You may copy and distribute the Program (or a work based on it,
Xunder Section 2) in object code or executable form under the terms of
XSections 1 and 2 above provided that you also do one of the following:
X
X    a) Accompany it with the complete corresponding machine-readable
X    source code, which must be distributed under the terms of Sections
X    1 and 2 above on a medium customarily used for software interchange; or,
X
X    b) Accompany it with a written offer, valid for at least three
X    years, to give any third party, for a charge no more than your
X    cost of physically performing source distribution, a complete
X    machine-readable copy of the corresponding source code, to be
X    distributed under the terms of Sections 1 and 2 above on a medium
X    customarily used for software interchange; or,
X
X    c) Accompany it with the information you received as to the offer
X    to distribute corresponding source code.  (This alternative is
X    allowed only for noncommercial distribution and only if you
X    received the program in object code or executable form with such
X    an offer, in accord with Subsection b above.)
X
XThe source code for a work means the preferred form of the work for
Xmaking modifications to it.  For an executable work, complete source
Xcode means all the source code for all modules it contains, plus any
Xassociated interface definition files, plus the scripts used to
Xcontrol compilation and installation of the executable.  However, as a
Xspecial exception, the source code distributed need not include
Xanything that is normally distributed (in either source or binary
Xform) with the major components (compiler, kernel, and so on) of the
Xoperating system on which the executable runs, unless that component
Xitself accompanies the executable.
X
XIf distribution of executable or object code is made by offering
Xaccess to copy from a designated place, then offering equivalent
Xaccess to copy the source code from the same place counts as
Xdistribution of the source code, even though third parties are not
Xcompelled to copy the source along with the object code.
X
X  4. You may not copy, modify, sublicense, or distribute the Program
Xexcept as expressly provided under this License.  Any attempt
Xotherwise to copy, modify, sublicense or distribute the Program is
Xvoid, and will automatically terminate your rights under this License.
XHowever, parties who have received copies, or rights, from you under
Xthis License will not have their licenses terminated so long as such
Xparties remain in full compliance.
X
X  5. You are not required to accept this License, since you have not
Xsigned it.  However, nothing else grants you permission to modify or
Xdistribute the Program or its derivative works.  These actions are
Xprohibited by law if you do not accept this License.  Therefore, by
Xmodifying or distributing the Program (or any work based on the
XProgram), you indicate your acceptance of this License to do so, and
Xall its terms and conditions for copying, distributing or modifying
Xthe Program or works based on it.
X
X  6. Each time you redistribute the Program (or any work based on the
XProgram), the recipient automatically receives a license from the
Xoriginal licensor to copy, distribute or modify the Program subject to
Xthese terms and conditions.  You may not impose any further
Xrestrictions on the recipients' exercise of the rights granted herein.
XYou are not responsible for enforcing compliance by third parties to
Xthis License.
X
X  7. If, as a consequence of a court judgment or allegation of patent
Xinfringement or for any other reason (not limited to patent issues),
Xconditions are imposed on you (whether by court order, agreement or
Xotherwise) that contradict the conditions of this License, they do not
Xexcuse you from the conditions of this License.  If you cannot
Xdistribute so as to satisfy simultaneously your obligations under this
XLicense and any other pertinent obligations, then as a consequence you
Xmay not distribute the Program at all.  For example, if a patent
Xlicense would not permit royalty-free redistribution of the Program by
Xall those who receive copies directly or indirectly through you, then
Xthe only way you could satisfy both it and this License would be to
Xrefrain entirely from distribution of the Program.
X
XIf any portion of this section is held invalid or unenforceable under
Xany particular circumstance, the balance of the section is intended to
Xapply and the section as a whole is intended to apply in other
Xcircumstances.
X
XIt is not the purpose of this section to induce you to infringe any
Xpatents or other property right claims or to contest validity of any
Xsuch claims; this section has the sole purpose of protecting the
Xintegrity of the free software distribution system, which is
Ximplemented by public license practices.  Many people have made
Xgenerous contributions to the wide range of software distributed
Xthrough that system in reliance on consistent application of that
Xsystem; it is up to the author/donor to decide if he or she is willing
Xto distribute software through any other system and a licensee cannot
Ximpose that choice.
X
XThis section is intended to make thoroughly clear what is believed to
Xbe a consequence of the rest of this License.
X
X  8. If the distribution and/or use of the Program is restricted in
Xcertain countries either by patents or by copyrighted interfaces, the
Xoriginal copyright holder who places the Program under this License
Xmay add an explicit geographical distribution limitation excluding
Xthose countries, so that distribution is permitted only in or among
Xcountries not thus excluded.  In such case, this License incorporates
Xthe limitation as if written in the body of this License.
X
X  9. The Free Software Foundation may publish revised and/or new versions
Xof the General Public License from time to time.  Such new versions will
Xbe similar in spirit to the present version, but may differ in detail to
Xaddress new problems or concerns.
X
XEach version is given a distinguishing version number.  If the Program
Xspecifies a version number of this License which applies to it and "any
Xlater version", you have the option of following the terms and conditions
Xeither of that version or of any later version published by the Free
XSoftware Foundation.  If the Program does not specify a version number of
Xthis License, you may choose any version ever published by the Free Software
XFoundation.
X
X  10. If you wish to incorporate parts of the Program into other free
Xprograms whose distribution conditions are different, write to the author
Xto ask for permission.  For software which is copyrighted by the Free
XSoftware Foundation, write to the Free Software Foundation; we sometimes
Xmake exceptions for this.  Our decision will be guided by the two goals
Xof preserving the free status of all derivatives of our free software and
Xof promoting the sharing and reuse of software generally.
X
X			    NO WARRANTY
X
X  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
XFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
XOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
XPROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
XOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
XMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
XTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
XPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
XREPAIR OR CORRECTION.
X
X  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
XWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
XREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
XINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
XOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
XTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
XYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
XPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
XPOSSIBILITY OF SUCH DAMAGES.
X
X		     END OF TERMS AND CONDITIONS
X
X	Appendix: How to Apply These Terms to Your New Programs
X
X  If you develop a new program, and you want it to be of the greatest
Xpossible use to the public, the best way to achieve this is to make it
Xfree software which everyone can redistribute and change under these terms.
X
X  To do so, attach the following notices to the program.  It is safest
Xto attach them to the start of each source file to most effectively
Xconvey the exclusion of warranty; and each file should have at least
Xthe "copyright" line and a pointer to where the full notice is found.
X
X    <one line to give the program's name and a brief idea of what it does.>
X    Copyright (C) 19yy  <name of author>
X
X    This program is free software; you can redistribute it and/or modify
X    it under the terms of the GNU General Public License as published by
X    the Free Software Foundation; either version 2 of the License, or
X    (at your option) any later version.
X
X    This program is distributed in the hope that it will be useful,
X    but WITHOUT ANY WARRANTY; without even the implied warranty of
X    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
X    GNU General Public License for more details.
X
X    You should have received a copy of the GNU General Public License
X    along with this program; if not, write to the Free Software
X    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
X
XAlso add information on how to contact you by electronic and paper mail.
X
XIf the program is interactive, make it output a short notice like this
Xwhen it starts in an interactive mode:
X
X    Gnomovision version 69, Copyright (C) 19yy name of author
X    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
X    This is free software, and you are welcome to redistribute it
X    under certain conditions; type `show c' for details.
X
XThe hypothetical commands `show w' and `show c' should show the appropriate
Xparts of the General Public License.  Of course, the commands you use may
Xbe called something other than `show w' and `show c'; they could even be
Xmouse-clicks or menu items--whatever suits your program.
X
XYou should also get your employer (if you work as a programmer) or your
Xschool, if any, to sign a "copyright disclaimer" for the program, if
Xnecessary.  Here is a sample; alter the names:
X
X  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
X  `Gnomovision' (which makes passes at compilers) written by James Hacker.
X
X  <signature of Ty Coon>, 1 April 1989
X  Ty Coon, President of Vice
X
XThis General Public License does not permit incorporating your program into
Xproprietary programs.  If your program is a subroutine library, you may
Xconsider it more useful to permit linking proprietary applications with the
Xlibrary.  If this is what you want to do, use the GNU Library General
XPublic License instead of this License.
X
SHAR_EOF
chmod 0644 COPYING ||
echo 'restore of COPYING failed'
Wc_c="`wc -c < 'COPYING'`"
test 17983 -eq "$Wc_c" ||
	echo 'COPYING: original size 17983, current size' "$Wc_c"
fi
# ============= ChangeLog ==============
if test -f 'ChangeLog' -a X"$1" != X"-c"; then
	echo 'x - skipping ChangeLog (File already exists)'
else
echo 'x - extracting ChangeLog (Text)'
sed 's/^X//' << 'SHAR_EOF' > 'ChangeLog' &&
XTue Oct 11 16:25:41 1994  Christopher Lott  <lott@bogner.informatik.uni-kl.de>
X
X	* Version 1.12
X	* Makefile.in: removed the test directory's dependency on the
X	  tarred/compressed/uuencoded file due to a loop.  The test
X	  directory may be unpacked unnecessarily, but this is not as
X	  serious as failing to generate a new tarred/compressed/uuencoded
X	  file after the test data changes.
X
XFri Sep  2 08:37:36 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X	* csize.man: added mention that trigraphs are not supported, and
X	  neither dollar signs nor at signs are accepted in identifiers.
X	  Changed discussion of handling comments on preprocessor lines.
X
XThu Sep  1 14:54:43 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X	* Version 1.11
X	* Responded to bug report from Sven-Ove Westberg <sow@cad.luth.se>
X	  who correctly pointed out that csize was not properly handling
X	  comments that occur on the same line as a preprocessor
X	  directive.  Extended function pp_dir() to handle comments.
X
XSun Aug 21 13:16:15 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X        * Version 1.10
X	* Shortened file names to stay within the 14-character constraint
X	  imposed by some sytems.
X	* Added a missing closing quotation mark in the test directory
X	  Makefile
X	* Adapted to version 2.4.7 of flex.
X	* Updated the README to admit that I do not fully utilize the
X	  capabilities of the scanner.
X	* Reworked the changelog into Gnu's accepted format
X	* Moved function names in C files to column 1 to help ansi2knr
X	* Moved Makefile to Makefile.in, reworked it for autoconf
X	* Created configure.in so that I can use autoconf
X	* Copied aclocal.m4 from GNUm4-1.2 directory
X	* Created configure using autoconf
X	* Updated the INSTALL file to state clearly the dependence on UNIX
X	  systems, and to reflect the addition of configure.
X	* Copied the install.sh file from GNUm4-1.2 for SYSV people.
X
XSun Jul 24 10:00:45 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X        * Version 1.9.
X	* Failure: the string literal "\\" was not recognized properly.
X	  Removed fault by reworking code to process backslashes in
X	  string literals more intelligently.  
X	* Did the same for pp dirs, where the same fault was lurking.
X
XWed Jul 29 07:12.49 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X        * Version 1.8
X	* Split the README into a README and an INSTALL file.
X	* Renamed version.h to patchlevel.h
X	* Added a target to the Makefile for unpacking the tests.
X
XMon Jun 13 05:19:40 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X        * Version 1.7
X	* Added code to handle the cases where a totally blank line
X	  appears in a comment or a preprocessor directive.  Lines with
X	  white-space characters were already being treated correctly, 
X	  but lines with nothing but a newline were not.  In the cases
X	  of comments or preprocessor directives, the line is not counted
X	  in the blank-line category but instead in the comment or nonblank
X	  noncomment line category, respectively.  
X	* Updated the man page to explain these counting rules.
X	* Added test cases (v-*) for these conditions.  Because counting
X	  the blank lines depends on their surrounding context, I can't use
X	  a grep/wc combination to verify the counts automatically.
X
XSun Jun 12 09:37:20 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X        * Version 1.6
X	* Removed fault that caused string literal continuation lines 
X	  not to be counted correctly as nonblank noncomment lines.
X	  This was difficult and resulted in much reorganization of
X	  the code that counts nonblank noncomment lines, newlines, 
X	  comments, and pp dirs to be more modular.
X	* Added test cases for continuation lines in string literals
X	  and in preprocessor directives.
X	* Added -v flag == print version information.  
X	  Updated the man page accordingly.
X	  Added file version.h, updated the Makefile.
X	* Updated the README to warn about different implementations
X	  of getopt() that cause mismatches in the test ouput.  This
X	  is not a serious problem.
X	* Added many comments to explain the inner workings of the
X	  counting functions. 
X
XFri Jun 10 08:44:26 1994  Christopher Lott  (lott@bogner.informatik.uni-kl.de)
X
X        * Version 1.5
X	* Put files under revision control
X	* Added preprocessor directives:
X	  include_next, import, warning, sccs, ident, assert, unassert.
X	  I can't find documentation of #indent in K&R 1/e, K&R 2/e,
X	  or even in Stroustrup _C++_ 2/e.  However, GCC's info file
X	  mentions it, and it's supported both by gcc and Sun's cc.
X	  The rest came from reading version 2.5.8 of GCC's cccp.c.
X	  Changed the man page to reflect the additions.
X	* removed fault that caused string literals with embedded
X	  backslashes and newlines to be handled improperly.
X	  Added function string_lit() to process all string literals.
X	* Removed fault that caused backslashes outside of string
X	  literals to generate a "bad character" message.  Added a lex
X	  rule.  Now they are recognized, but the backslash processing
X	  is still not sophisticated.
X
XChanges between versions 1.3 and 1.4:
X
X	* Removed faults that caused multi-line comments to threw off
X	  the newline count and to echo comments improperly.
X	  Both were removed by switching back to the original
X	  comment-eating code; dropped use of the code from flexdoc(1).
X	* Removed fault that caused nonempty whitespace lines not to be
X	  echoed verbatim 
X	* Removed fault that caused blank line immediately after pp
X	  directive to be ignored.  Changed pp-eating code to give
X	  back the newline that terminates the pp directive; this
X	  allows the scanner to recognize the beginning of a line (^)
X	  in the pattern for whitespace lines.
X	* Removed ^ before pattern for preprocessor directives; i.e.,
X	  they will be recognized even if non-whitespace preceeds
X	  them.  This deviates from the spec in K&R 2/e but matches
X	  gcc's behavior.  Changed the man page to reflect this.
X	* Aadded more cases to the regression test suite to detect faults.
X
XChanges between versions 1.2 and 1.3:
X
X	* Upgraded to flex version 2.4.6; forced me to work around a
X	  bug in flex - use yyrestart(FILE *) to set up the scanner.
X	* Removed fault that caused the the closing */ of a comment
X	  to be omitted in the echoed output.
X
XChanges between versions 1.1 and 1.2:
X
X	* Replaced comment-eating code with example from flexdoc(1) man page
X	* lex could not count pp dirs properly, so I gave up on lex
X	  and switched to using flex.
X	* Cleaned up man page and Makefile
X	* Added scan.c.flex to the distribution for those w/o flex
X
XRelease 1.1 of csize:
X
X	* First release to interested parties.
SHAR_EOF
chmod 0644 ChangeLog ||
echo 'restore of ChangeLog failed'
Wc_c="`wc -c < 'ChangeLog'`"
test 6667 -eq "$Wc_c" ||
	echo 'ChangeLog: original size 6667, current size' "$Wc_c"
fi
true || echo 'restore of scan.c.flex failed'
echo End of part 2, continue with part 3
exit 0

exit 0 # Just in case...

