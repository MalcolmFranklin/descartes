From murphyn@orca.cig.mot.com Tue Jun  7 10:07:27 1994
Return-Path: <murphyn@orca.cig.mot.com>
Received: from motsps.sps.mot.com by chdasic (4.1/SMI-4.1)
	id AA04130; Tue, 7 Jun 94 10:07:25 MST
Received: by motsps.sps.mot.com (4.1/SMI-4.1/Email-2.1)
	id AA21890; Tue, 7 Jun 94 10:07:22 MST
Received: from pobox.mot.com by spsdemon.sps.mot.com (4.1/SMI-4.1/Email 2.1 10/22/93)
	id AA17457; Tue, 7 Jun 94 10:06:24 MST
Received: from motcig.cig.mot.com by pobox.mot.com with SMTP (5.67b/IDA-1.4.4/MOT-3.1 for <franklin@chdasic.sps.mot.com>)
          id AA28681; Tue, 7 Jun 1994 12:06:16 -0500
Received: from orca.cig.mot.com by motcig.cig.mot.com (4.1/SMI-4.1)
	id AA02129; Tue, 7 Jun 94 12:06:16 CDT
Received: by orca.cig.mot.com (4.1/SMI-4.1-CIG-1.1)
	id AA15515; Tue, 7 Jun 94 12:06:15 CDT
Date: Tue, 7 Jun 94 12:06:15 CDT
From: murphyn@orca.cig.mot.com (Neal P. Murphy)
Message-Id: <9406071706.AA15515@orca.cig.mot.com>
To: franklin@chdasic
Subject: Re: Implementing queues with pipes or FIFOs
Newsgroups: comp.unix.programmer,comp.unix.internals
References: <1994Jun7.013923.17488@newsgate.sps.mot.com>
Status: OR

In comp.unix.internals you write:

>The hard part seems to be making sure that the reader gets a complete message,
>and NO MORE than a single complete message.  If I could solve this, I could 
>create a linked-list of received messages, and provide a function call to 
>either fetch a message from the list, or block until another process writes
>a message.

This is easy. Write the 2 or 4 bytes of length immediately in front of the
message, then write the message. The reader will then read the 2 or 4 bytes
of length and then read (length) bytes from the pipe/FIFO. You're guaranteed
to read only one complete message. I do this with most of my socket/pipe
communications.


void main()
{
char message[100];
int length, pipe_d[2];

if (pipe(pipe_d) < 0)
{
    perror ("pipe);
    exit (1);
}

(void) strcpy (message, "This is the message");
length = strlen (message);

write (pipe_d[1], *length, 4);			/* write the length */
write (pipe_d[1], *message, length);   /* write the message */

memset (message, '\0', 100);

read (pipe_d[0], *length, 4);			/* read the length */
read (pipe_d[0], *message, length);		/* read the message */

printf ("Message transceived is: \"%s\"\n", message);

}

Just remember to convert byte order if the reader and writer run on
processors with differing Endian-ness.

Fester

